################################################################################
### Author: Marco Israel
### Date: 2019-06
### Location: Espelkamp
### Brief: Documentation about Swipetronic software stuff.
################################################################################





################################################################################
### General information
################################################################################


About the 8 bit PIC controller:
------------------------------
After talking to microchip they mentioned out to take a PIC8 controller is only
possible for LITTLE first examples. For the stuff we planed using different
sensor techniques and a lot of sensors we should take a 16bit MCu at least
otherwise we could run in performance issues later on. To get ASIL complaint
a 16bit MCU is needed anyway. AUTOSAR needs at least 16 bit controllers in
minimum if I'm not incorrect.



About the Toolchain:
------------------------------
Because we had not paid for the toolchain by using an open freeware license
there is no support from microchip in case of problems.

According to microchip, also the free version of the toolchain might not include
all features and performance/optimisation stuff like a professional version.



About STM32
------------------------------
Because I know STMMicroelectronics is also doing sensitive touch stuff to
I did some research (see below or take a look into the researchSensitiveTouch
folder). I think there was done some research before from others about
alternative controllers and vendors but maybe you should research again if you
starting the project new. From Software side the ARM stuff from STM is much
professional and more easier to use in my . There are great working and more
powerful code generation tools, the (driver) code is better structured and
MISRA-C compliend in most parts. From software side I recommend to use this 32
bit controllers if the hardware and timing requirements would also fit. Also
the support and help from a community is much bigger.






################################################################################
### Folder content description
################################################################################

.
├── exapleCode
│   ├── pic_generalExamples
            Holding general examples from microship how to implement the
            controller.
│   └── pic_touchExamples
            Direct quick-and-dirty examples for LE from Mircochup using a PIC8.
├── researchSensitiveTouch
│   ├── microchip
            PDFs, manuals or withpapers from microchip how to build sensitive
            itouch hardware and software.
│   └── stm32
            PDFs, manuals or with papers from STM32 and STM32 low power MCUs
            how to build sensitive touch hardware and software with STM.
├── softwareArchitktureDesigne
            Diagrams about first design ideas, HW-component block diagram and
            Software layers. I was just going to use object oriented c.
├── toolchain
│   └── xc8
            Documentation about the toolchain and the debugger. I did the notes
            inside the PDFs.

            Also I put there a makefile which is holding the compiler flags I
            used. This makefile does not work alone, it needs a core makefile
            like mine.
└── userManual
            Different user manuals mostly with notes inside from my side.





################################################################################
### Folder content tree
################################################################################


