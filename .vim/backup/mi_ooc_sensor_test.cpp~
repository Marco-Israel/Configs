/******************************************************************************
 *
 * @file 	mi_ooc_sensor.cpp
 * @author 	Marco Isarel (MI)
 * @date 	2019-06
 * @ingroup cppUTest
 * @copyright Copyright (c) 2019 Marco Israel
 *
 *
 * @brief UnitTest the sensor functions
 *
 *
 * @details UnitTest the sensor functions
*
*******************************************************************************/








/*******************************************************************************
 *******************************************************************************
 **                     DEFINITIONS
 *******************************************************************************
 ******************************************************************************/



/*******************************************************************************
 **     INCLUDED global defined information
 ******************************************************************************/

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockSupport.h"

#include <mi_ooc_sensor_mock.hpp>


extern "C" {
#include "mi_ooc_sensor.h"
}



/*******************************************************************************
 **     MACRO definition
 ******************************************************************************/





/*******************************************************************************
 **     Variables and Types EXTERN (public)
 ******************************************************************************/

static sensor__ctorParamList__st ctorParamList__S;
static sensor__this__st this__S;
static sensor__vFTable__st* ps__vFTable;








/*******************************************************************************
 *******************************************************************************
 **                     Unittests
 *******************************************************************************
 ******************************************************************************/





TEST_GROUP(MI_OOC_SENSOR_TG)
{

    void setup()
    {

        ps__vFTable = _sensor__getPt_vFTable();
        UT_PTR_SET(ps__vFTable->virtualOperation__S.pf__send,&sendSensor_MOCK);
        UT_PTR_SET(ps__vFTable->virtualOperation__S.pf__receive,
                &receiveSensor_MOCK);

        sensor__new(&this__S, &ctorParamList__S);
    }

    void teardown()
    {
        mock().checkExpectations();
        mock().clear();
    }

};





/* ----- PART: Unit Test -----------------------------------------------------*/

TEST(MI_OOC_SENSOR_TG, 1__vFTable_is_init)
{

    POINTERS_EQUAL(this__S.ps__virtualOperation,_sensor__getPt_vFTable());

}





TEST(MI_OOC_SENSOR_TG, 2__this_is_returned_after_init)
{

    POINTERS_EQUAL(&this__S, sensor__new(
                &this__S, &ctorParamList__S));

}





TEST(MI_OOC_SENSOR_TG, 3__mock_call_to_sensor_ctor)
{
        #define NO_CALL_BECAUSE_CTOR_IS_CALL_IN_BASE_DIRECTLY (0u)
       UT_PTR_SET(ps__vFTable->virtualOperation__S.pf__ctor,&ctorSensor_MOCK);
       expactNCall__sensorCtor(&this__S, &ctorParamList__S,
               NO_CALL_BECAUSE_CTOR_IS_CALL_IN_BASE_DIRECTLY);
       sensor__new(&this__S, &ctorParamList__S);
}






TEST(MI_OOC_SENSOR_TG, 4__mock_call_to_send)
{

    uint8_t buffer[5];
   expactOneCall__sensorSend(&this__S, &buffer[0], 5);
   sensor__send(&this__S, &buffer[0], 5);
}





TEST(MI_OOC_SENSOR_TG, 5__mock_call_to_receive)
{

    uint8_t buffer[5];
   expactOneCall__sensorReceive(&this__S, &buffer[0], 5);
   sensor__receive(&this__S, &buffer[0], 5);
}





//TEST(MI_OOC_SENSOR_TG, 6__overwrite_function_with_ctor_param)
//{
//    uint8_t tmpBuffer[5];
//
//    uint8_t numberOfCalls =1u;
//    sensor__errorHandlerParamList__st  tmpparamList;
//
//    sensor__this__st tmpthis__S;
//    sensor__ctorParamList__st tmpctorParamList__S;
//    tmpctorParamList__S.pf__send = &sendSensor_MOCK;
//    tmpctorParamList__S.pf__receive = &receiveSensor_MOCK;
//    tmpctorParamList__S.pf__errorHandler =&errorHandler_MOCK;
//
//    sensor__new(&tmpthis__S, &tmpctorParamList__S);
//
//    expactOneCall__sensorSend(&tmpthis__S, &tmpBuffer[0],sizeof(tmpBuffer));
//    expactOneCall__sensorReceive(&tmpthis__S, &tmpBuffer[0],sizeof(tmpBuffer));
//    expactNCall__sensorErrorHandler(&tmpthis__S, &tmpparamList,
//                numberOfCalls);
//
//
//   sensor__send(&tmpthis__S, &tmpBuffer[0],sizeof(tmpBuffer));
//    sensor__receive(&tmpthis__S, &tmpBuffer[0],sizeof(tmpBuffer));
//    sensor__errorHandler(&tmpthis__S,&tmpparamList);
//
//}
//



/* -------- END PART: Unit Tests ---------------------------------------------*/



/************************************************** END OF FILE ***************/
