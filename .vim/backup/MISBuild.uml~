/'******************************************************************************
* @file             MIS_BUILD_strcture.uml
* @author           Marco Israel
* @version          v. 1.0
* @date             06-2019
* @ingroup          uml
* @brief            Shows the mis_build buildstructure.
*
********************************************************************************
* @detail
* This Build System was designed by the following goals
*   - KIS, keep the build of a project simple.
*   - Encapsulate compiler depending makefile information from genereal
        (more complex) makefile tasks with the goial to make it easy adding
        new compiler depending makefiles by still keep / use the same building
        rules (steps).
    - One Single place of code: Thirdparty Code, Makefiles, configs, ... which
        are used in the same way way by multi projects should not be copied
        into a project folder rather than simple inclde, link or use it from a
        central place like standard libires installed on your computer at single
        place.
    - Integrad all what is needed to build a target into this buildsystem. E.g.
        like toolchainces or other helper tools.
    - Provide a flat (folder) structure to the user which is as simple to
        understand as possible.
    - Let the user think only in his project folder without need to understand
        the other build tools or makefile rules.
    - Fast and flexible in his usage.
    - Deterministic Build: No autogenerated sub-folders files, recursive make
        calls or others which make the build hard to unterstand and
        non-deterministic.
    - easy to extend. E.g. adding new tools to the Build process by simple add
        a new rule to the core makefile which is than aviable for all projects
    - Integrad and easy to Use unit Tests and codeanlyse as well as other
        helpfull tools like code formating.
    - No configuration needed when starting new project epact chouse a makefile
        and set the project name.
*
********************************************************************************
* @attention
* ____TODO______
*
*
******************************************************************************'/

@startuml
scale 1/2

!$cm1 = "coreMakefile_MISBUILD"
!$cm2 = "coreMakefile_CppUTest"

title Discription of the MIS_OOC Buildsystem, its componets and interactions
header Discription of the MIS_OOC Buildsystem, its componets and interactions
footer Author: Marco Israel (MIS)       06-2019         %page% of %lastpage%


legend
    |= |= Type of call or dependency |
    | <back:#black> </back> | Call from User / Call from outside |
    | <back:#red> </back> | Project makefiles include global makefiles |
    | <back:#green> </back>| Makefile command wich calls others tools |
    | <back:#orange> </back>| Makefile makefile builds libs and targets |
    | <back:#SkyBlue> </back>| sub objects inherrids or implements base objects|
    | <back:#magenta> </back>| Unittestharnes runs unittests |
endlegend



/' ----- PART: Define folder struct and contend ------------------------------'/

rectangle MIS_BUILD {


   folder TOOLS {

       folder makefiles {
            file $cm1
            file tasking.mk
            file pic8.mk
       }


       folder thirdpartyCODE {

            folder mi_ooc {

                folder MIOOCproductive {

                }


                folder MIOOCunitTest {

                }
           }

           folder lemdd {

           }
        }


        folder toolchain {

            folder ToolchainAurix {

            }

            folder ToolchainPic {

            }

        }


        folder templates {
            file toolchain_makefile.mk
            file emptyFile.ch
            file unitTest.ch
            file plantUML.uml
         }


        folder thirdpartyTOOLS {

            folder cppUTest {
                file $cm2
            }


            folder cppCheck_MISRAC {

            }


            folder clangFormat_gnuIndent {

            }


            folder doxygen {

            }


            folder plantuml {

            }

            folder latex {

            }


            folder lauterbachTrace32 {

            }

        }

        folder thirdpartySCRIPTS {

        }
    }

    folder projectPIC {

    }





    folder projectAURIX {
        file Makefile_aurix

        folder app {

        }

        folder bsw {

        }

        folder driver {

        }

        folder os {

        }

        folder prebuild {
        }

        folder postbuild {
        }

        folder include {

        }


        folder OUT{

            folder libaries {
                file libprebuild.a
                file libapp.a
                file libbsw.a
                file libdriver.a
                file libos.a
                file libthirdparty.a
                file libpostbuild.a
            }
            folder objects{
            }
            folder other{
                file map
                file lst
                file hex
                file elf
            }

        }

        folder DOC {

            folder doxygen_latex {
            }

            folder uml {
            }

            file todolist.txt

        }

        folder CONFIG {
        }

        folder UNITTEST {

            file Makefile_unittest

            folder test_aurix {

            }

            folder testDouble_aurix {
            }
        }
    }
}


'            rectangle thridpartyTOOLS {
'                rectangle noteThirdpartyTOOLS [
'                NOTE: Not all tools are integrated at/or foll tested at the moment.
'                ]
'                }
'
'
'   folder buildTargets {
'    file hex
'    file elf
'    file lib
'    file map
'    file lst
'    file other
'    }


component runProgrammer

actor User


/' -------- END PART: Define folder struct and contend -----------------------'/



User --> Makefile_aurix : > <<make help>>


Makefile_aurix --|> $cm1 : > << include >>

Makefile_aurix --> prebuild  : > <<build libprebuild.a >>
Makefile_aurix --> startup  : > <<build libstartup.a >>
Makefile_aurix --> app  : > <<build libapp.a >>
Makefile_aurix --> bsw  : > <<build libbsw.a >>
Makefile_aurix --> driver  : > <<build libdriver.a >>
Makefile_aurix --> os  : > <<build libos.a >>
Makefile_aurix --> postbuild  : > <<build libpostbuild.a >>
Makefile_aurix --> thirdpartyCODE : > <<build libthirdparty.a>>

Makefile_aurix --> Makefile_unittest : > <<call cppUTest >>

Makefile_aurix --> thirdpartyTOOLS : > <<run thirdparty Tools >>


Makefile_aurix --> runProgrammer : > << flash hex on device >>
Makefile_aurix --> thirdpartySCRIPTS  : > << Run some pre or post scripts >>


/' ----- PART: Makefile sub to Makefile base ---------------------------------'/

/' -------- END PART: Makefile sub to Makefile base --------------------------'/





/' ----- PART: Object sub to Object base ---------------------------------'/

/' -------- END PART: Object sub to Object base ------------------------------'/





/' ----- PART: PIC project MAKEFILE acions -----------------------------------'/


/' ----- END PART: PIC project MAKEFILE actions ------------------------------'/





/' ----- PART: AURIX project MAKEFILE actions --------------------------------'/


/' ----- END PART: AURIX project MAKEFILE actions ----------------------------'/





/' ----- PART: unittest production code --------------------------------------'/

/' -------- END PART: unittest production code -------------------------------'/




/' ----- PART: Layouting -----------------------------------------------------'/
    projectAURIX  -[hidden]up-> TOOLS
    projectAURIX  -[hidden]down-> runFlashDevice

/' ----- END PART: Layouting -------------------------------------------------'/


@enduml
