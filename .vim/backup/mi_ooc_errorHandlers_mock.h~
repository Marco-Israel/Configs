/*******************************************************************************
* @file             ____TODO______.c
* @file             ____TODO______.h
* @author           Marco Israel
* @version          v. 6.0
* @date             ____TODO______
* @ingroup          ____TODO______
* @copydoc          ____TODO______.h
* @brief            ____TODO______
* @copyright        Copyright (c) 2018 Marco Israel. All rights reserved.
*
*
*
*
*                      IMPORTANT NOTICE - COPYRIGHT INFORMATION
*
*
* English:
*
* THIS SOFTWARE AND ITS OBJECT ORIENTED ARCHITECTURE IN THE PROGRAMMING
* LANGUAGE C AS WELL AS THE NAMING CONVENTION IS PROVIDED "AS IS" by
* MARCO ISRAEL. ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO  EVENT SHALL MARCO ISRAEL
* BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT
* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR
* OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
* ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* The Lemfoerder Electronics GmbH, Bussche-Münch-Straße 12, 32339 Espelkamp,
* is allowed to use this object oriented software architecture as well
* as its naming conversation in and only in the their project
* 'ED0096_Swipetronic'. Marco Israel 2019 - 2020.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*     * Redistribution of source code must retain the this copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistribution in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in
*       the documentation and/or other materials provided with the
*       distribution.
*     * Neither the name of the <organization> nor the names of its
*       contributors may be used to endorse or promote products derived
*       from this software without specific prior written permission.
*
*
*
* German:
*
* Alle Inhalte in source und binaer Form, insbesondere die hier aufgezeigte
* object orientierte Softwarearchitektur- in der Programmiersprache C,
* seiner coding Conversation (Namensgebung etwa fuer Variablen, Funktionen,
* Parameter, Datentypen, usw.) sind urheberrechtlich geschuetzt.
* Alle Rechte, einschließlich der Verwendung, Veroeffentlichung, Bearbeitung,
* Uebersetzung oder Vervielfältigung, bleiben Marco Israel vorbehalten.
* Dieses gilt auch fuer alle Instanzen, Kopien oder sonstigen Verwendungen
* in source oder binearform. In jedem Fall sind diese Copyright und Urheber
* Informationen zu uebernehmen und duerfen nicht ohne Zustimmung vereandert
* oder entfernt werden. Marco Israel uebernimmt keine Haftung in irgendeiner
* Form und Art und Weise, die durch die Nutzung dieser Architektur oder seiner
* Kopien und Instancen in source oder binaerform direkt oder indirekt
* entstehen und kann nicht fuer Schaeden belangt werden.
*
* Die Lemfoerder Electronics GmbH, Bussche-Münch-Straße 12, 32339 Espelkamp,
* ist berechtigt dieses Template sowie seine object orientierte Software
* Architektur in C, als auch der die genutzte Namensgebungskonversation,
* innerhalb * und ausschliesslich fuer das * Project 'ED0096_Swipetronic'
* zu nutzen. Marco Israel 2019 - 2020.
*
*
*
*
********************************************************************************
* @detail
* ____TODO______
*
*
********************************************************************************
* @attention
* ____TODO______
*
*
*******************************************************************************/



/*******************************************************************************
 **     INCLUDED GUARDS
 ******************************************************************************/

#ifndef MOCK_ERROR_HANDLER_H
#define MOCK_ERROR_HANDLER_H

/* ____TODO______*/
#endif








/*******************************************************************************
 *******************************************************************************
 **                     DEFINITIONS
 *******************************************************************************
 ******************************************************************************/



/*******************************************************************************
 **     INCLUDED global defined information
 ******************************************************************************/



#include "CppUTestExt/MockSupport_c.h"

extern "C" {
#include "mi_ooc_errorHandlers.h"
}





/*******************************************************************************
 **     Variables global EXTERN (public) definition
 ******************************************************************************/





/*******************************************************************************
 **     MACRO definition
 ******************************************************************************/







/*******************************************************************************
 **     Type GENERAL definition
 ******************************************************************************/




/*******************************************************************************
 **     Type FUNCTION POINTER definition
 ******************************************************************************/




/*******************************************************************************
 **     Type UNION definition
 ******************************************************************************/




/*******************************************************************************
 **     Type ENUM definition
 ******************************************************************************/




/*******************************************************************************
 **     Type STRUCTURE definition
 ******************************************************************************/




/*******************************************************************************
 **     Function PRIVATE PROTOTYPE definition (static)
 ******************************************************************************/








/*******************************************************************************
 *******************************************************************************
 **                     IMPLEMENTATIONS
 *******************************************************************************
 ******************************************************************************/



/*******************************************************************************
 **     Variables global EXTERN (public) implementation
 ******************************************************************************/




/*******************************************************************************
 **     Variables global STATIC (private) implementation
 ******************************************************************************/





/*******************************************************************************
 **     Function PRIVATE INLINE implementation (STATIC inline)
 ******************************************************************************/




/*******************************************************************************
 **     Function PRIVATE implementation (static)
 ******************************************************************************/




/*******************************************************************************
 **     Function PROTECTED implementation (extern)
 ******************************************************************************/




/*******************************************************************************
 **     Function PUBLIC implementation (extern)
 ******************************************************************************/


extern void expactOneCall__errorHandler_default(void)
{
        mock_c()->expectOneCall("defaultErrorHandler");
}



extern void expactNCall__errorHandler_default(uint8_t numberOfCalls)
{
        mock_c()->expectNCalls(numberOfCalls, "defaultErrorHandler");
}



extern void mi_ooc__errorHandler_default_MOCK(
        mi_ooc_b1__this__st *const ps__this,
        mi_ooc_b1__errorHandlerParamList__st *const ps__paramList
        )
{

    mock_c()->actualCall("defaultErrorHandler")
        .withConstPointerParameter("ps__this", ps__this)
        .withConstPointerParameter("ps__paramList", ps__paramList);

}





/* ----- PART: ____TODO______ ------------------------------------------------*/


/* -------- END PART: ____TODO______ -----------------------------------------*/




/**************** (C) COPYRIGHT Marco Israel ****** END OF FILE ***************/

