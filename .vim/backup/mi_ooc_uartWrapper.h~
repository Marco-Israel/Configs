/*******************************************************************************
* @file             uartWrapper.h
* @author           Marco Israel
* @version          v. 1.5
* @date             2019-06
* @ingroup          mi_ooc
* @brief            
* @copyright        Copyright (c) 2018 Marco Israel. All rights reserved.

*
*
*
*                      IMPORTANT NOTICE - COPYRIGHT INFORMATION
*
*
* English:
*
* THIS SOFTWARE AND ITS OBJECT ORIENTED ARCHITECTURE IN THE PROGRAMMING
* LANGUAGE C AS WELL AS THE NAMING CONVENTION IS PROVIDED "AS IS" by
* MARCO ISRAEL. ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO  EVENT SHALL MARCO ISRAEL
* BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT
* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR
* OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
* ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* The Lemfoerder Electronics GmbH, Bussche-Münch-Straße 12, 32339 Espelkamp,
* is allowed to use this object oriented software architecture as well
* as its naming conversation in and only in the their project
* 'ED0096_Swipetronic'. Marco Israel 2019 - 2020.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*     * Redistribution of source code must retain the this copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistribution in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in
*       the documentation and/or other materials provided with the
*       distribution.
*     * Neither the name of the <organization> nor the names of its
*       contributors may be used to endorse or promote products derived
*       from this software without specific prior written permission.
*
*
*
* German:
*
* Alle Inhalte in source und binaer Form, insbesondere die hier aufgezeigte
* object orientierte Softwarearchitektur- in der Programmiersprache C,
* seiner coding Conversation (Namensgebung etwa fuer Variablen, Funktionen,
* Parameter, Datentypen, usw.) sind urheberrechtlich geschuetzt.
* Alle Rechte, einschließlich der Verwendung, Veroeffentlichung, Bearbeitung,
* Uebersetzung oder Vervielfältigung, bleiben Marco Israel vorbehalten.
* Dieses gilt auch fuer alle Instanzen, Kopien oder sonstigen Verwendungen
* in source oder binearform. In jedem Fall sind diese Copyright und Urheber
* Informationen zu uebernehmen und duerfen nicht ohne Zustimmung vereandert
* oder entfernt werden. Marco Israel uebernimmt keine Haftung in irgendeiner
* Form und Art und Weise, die durch die Nutzung dieser Architektur oder seiner
* Kopien und Instancen in source oder binaerform direkt oder indirekt
* entstehen und kann nicht fuer Schaeden belangt werden.
*
* Die Lemfoerder Electronics GmbH, Bussche-Münch-Straße 12, 32339 Espelkamp,
* ist berechtigt dieses Template sowie seine object orientierte Software
* Architektur in C, als auch der die genutzte Namensgebungskonversation,
* innerhalb * und ausschliesslich fuer das * Project 'ED0096_Swipetronic'
* zu nutzen. Marco Israel 2019 - 2020.
*
*
*
*
********************************************************************************
* @detail
* This file provides interface methods (empty functions) which must be
* implanted and should be a copy of this template file in the individual
* project folder.
*
* The wrapper (lets call it peripheral wrapper) implements functions to
* wrap the vendor drivers or directs accesses the mcu registers. Each wrapper
* function should be an 'inline' function and therefore (or because of) they
* should be as short as possible like one single micro or atomic task only.
*
* The mcu specific wrapper implementation must at least implement this function
* defined in this file but can implement new functions according to the mcu or
* the project.
*
* The UML diagrams in this template folder provides you the context of template
* structure in a graphical view. Feel free to take a look at this diagrams.
* In case of questions you can contact me under Marco-Israel@online.de.
*
*
********************************************************************************
* @attention
* This is only an Interface file and provides a dummy to make the linker happy
* if you like to compile the template files for instance.
* All implementation should be done in project specific files.
*
* If you change something inside the template structure, do this in the
* template folder first and run 'make' inside the 'test' folder to see if
*
*
*******************************************************************************/




/*******************************************************************************
 **     INCLUDED GUARDS
 ******************************************************************************/

#ifndef __PIC_UART_WRAPPER_H__
#define __PIC_UART_WRAPPER_H__
#endif


/*******************************************************************************
 *******************************************************************************
 **                     DEFINITIONS
 *******************************************************************************
 ******************************************************************************/



/*******************************************************************************
 **     INCLUDED global information
 ******************************************************************************/

#include <mi_ooc.h>
#include <mi_ooc_errorHandlers.h>

/*******************************************************************************
 **     Variables global EXTERN (public) definition
 ******************************************************************************/




/*******************************************************************************
 **     MACRO definition
 ******************************************************************************/
#ifndef __MI_OOC_UARAT1_HWNR__
#define __MI_OOC_UARAT1_HWNR__  (1u)
#endif




/*******************************************************************************
 **     Type GENERAL definition
 ******************************************************************************/




/*******************************************************************************
 **     Type FUNCTION POINTER definition
 ******************************************************************************/




/*******************************************************************************
 **     Type UNION definition
 ******************************************************************************/




/*******************************************************************************
 **     Type ENUM definition
 ******************************************************************************/




/*******************************************************************************
 **     Type STRUCTURE definition
 ******************************************************************************/




/*******************************************************************************
 **     Function PUBLIC PROTOTYPE definition (extern)
 ******************************************************************************/








/*******************************************************************************
 *******************************************************************************
 **                     IMPLEMENTATIONS
 *******************************************************************************
 ******************************************************************************/



/*******************************************************************************
 **     Variables global EXTERN (public) implementation
 ******************************************************************************/





/*******************************************************************************
 **     Variables global STATIC (private) implementation
 ******************************************************************************/





/*******************************************************************************
 **     Function PUBLIC INLINE implementation (STATIC inline)
 ******************************************************************************/



#ifndef __MI_OOC_UARAT1_INITIALIZE_HW__
#define __MI_OOC_UARAT1_INITIALIZE_HW__
static inline void _uart1__initialize_the_hw(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif




/* ----- PART: UART TX -------------------------------------------------------*/



#ifndef __MI_OOC_UARAT1_CHECK_TX_ENABLE__
#define __MI_OOC_UARAT1_CHECK_TX_ENABLE__
static inline void _uart1__enable_tx_if_not(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif





#ifndef __MI_OOC_UARAT1_CHECK_TX_READY__
#define __MI_OOC_UARAT1_CHECK_TX_READY__
static inline bool_t _uart1__is_tx_ready(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
        return 0;
}
#endif





#ifndef __MI_OOC_UARAT1_CHECK_TX_ERRORS__
#define __MI_OOC_UARAT1_CHECK_TX_ERRORS__
static inline bool_t _uart1__tx_has_error(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
        return 0;
}
#endif





#ifndef __MI_OOC_UARAT1_CLEAR_TX_FLAGS__
#define __MI_OOC_UARAT1_CLEAR_TX_FLAGS__
static inline void _uart1__clear_tx_error_statusflag(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif





#ifndef __MI_OOC_UARAT1_SEND__
#define __MI_OOC_UARAT1_SEND__
static inline void _uart1__send(uint8_t byteToSend)
{
    (void)byteToSend;
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif



/* -------- END PART: UART TX-------------------------------------------------*/





/* -------- END PART: UART RX-------------------------------------------------*/



#ifndef __MI_OOC_UARAT1_CHECK_RX_ENABLE__
#define __MI_OOC_UARAT1_CHECK_RX_ENABLE__
static inline void _uart1__enable_rx_if_not(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif





#ifndef __MI_OOC_UARAT1_CHECK_RX_READY__
#define __MI_OOC_UARAT1_CHECK_RX_READY__
static inline bool_t _uart1__is_rx_ready(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
        return 0;
}
#endif





#ifndef __MI_OOC_UARAT1_CHECK_RX_ERRORS__
#define __MI_OOC_UARAT1_CHECK_RX_ERRORS__
static inline bool_t _uart1__rx_has_error(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
        return 0;
}
#endif





#ifndef __MI_OOC_UARAT1_CLEAR_RX_FLAGS__
#define __MI_OOC_UARAT1_CLEAR_RX_FLAGS__
static inline void _uart1__clear_rx_error_statusflag(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif




#ifndef __MI_OOC_UARAT1_RX_HAS_DATA__
#define __MI_OOC_UARAT1_RX_HAS_DATA__
static inline bool_t _uart1__rx_has_data(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
        return 0;
}
#endif





#ifndef __MI_OOC_UARAT1_RECEIVE__
#define __MI_OOC_UARAT1_RECEIVE__
static inline void _uart1__receive(void)
{
    __MI_OOC__ERROR_HANDLER__DEFAULT__
}
#endif


/*******************************************************************************
 **     Function PRIVATE implementation (static)
 ******************************************************************************/




/*******************************************************************************
 **     Function PROTECTED implementation (extern)
 ******************************************************************************/




/*******************************************************************************
 **     Function PUBLIC implementation (extern)
 ******************************************************************************/



/**************** (C) COPYRIGHT Marco Israel ****** END OF FILE ***************/


