/*
 * File: untitled.c
 *
 * Code generated with Aurix MDD Framework for Simulink model 'untitled'.
 *
 * Model version                  : 1.22
 * Simulink Coder version         : 8.9 (R2015b) 13-Aug-2015
 * TLC version                    : 8.9 (Jul 31 2015)
 * C/C++ source code generated on : Wed Mar 13 14:58:55 2019
 *
 * Company                        : Lemfï¿½rder Electronic GmbH
 *
 *
 *
 * Target selection: lemdd_aurix.tlc
 * Embedded hardware selection: Infineon->TriCore
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include "untitled.h"
#include "untitled_private.h"
#include "Dio_Cfg.h"
#include "lemdd_io.h"

/* Block signals (auto storage) */
B_untitled_T untitled_B;

/* Block states (auto storage) */
DW_untitled_T untitled_DW;

/* Real-time model */
RT_MODEL_untitled_T untitled_M_;
RT_MODEL_untitled_T *const untitled_M = &untitled_M_;

/* Model step function */
void untitled_step(void)
{
  int32_T rtb_PulseGenerator = 0u;

  /* DiscretePulseGenerator: '<Root>/Pulse Generator' */
  rtb_PulseGenerator = ((untitled_DW.clockTickCounter < 1) &&
                        (untitled_DW.clockTickCounter >= 0));
  if (untitled_DW.clockTickCounter >= 1) {
    untitled_DW.clockTickCounter = 0;
  } else {
    untitled_DW.clockTickCounter++;
  }

  /* End of DiscretePulseGenerator: '<Root>/Pulse Generator' */

  /* DataTypeConversion: '<Root>/Data Type Conversion' */
  untitled_B.DataTypeConversion = (rtb_PulseGenerator != 0);

  /* S-Function Block: <Root>/AURIX GPIxO */
  lemdd_io_pin_s pin = {0};
  pin.pin_id = 230u;
  lemdd_aurix__gpio_device__st ioDevice = {0};
  ioDevice.channel_id = DIO_CHANNEL_14_6;
  pin.vp__io_device = &ioDevice;
  lemdd_io_set_pin_mode(&pin, (lemdd_io_mode_e) untitled_B.DataTypeConversion);
}

/* Model initialize function */
void untitled_initialize(void)
{
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(untitled_M, (NULL));

  /* block I/O */
  (void) memset(((void *) &untitled_B), 0,
                sizeof(B_untitled_T));

  /* states (dwork) */
  (void) memset((void *)&untitled_DW, 0,
                sizeof(DW_untitled_T));

  /* Start for DiscretePulseGenerator: '<Root>/Pulse Generator' */
  untitled_DW.clockTickCounter = 0;
}

/* Model terminate function */
void untitled_terminate(void)
{
  /* (no terminate code required) */
}

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
