################################################################################
### 					MI 	TASKING BUILDSYSTEM CONFIG
################################################################################
#
# @file 	Makefile
# @author 	Marco Isarel (MI)
# @date 	2019-03
#
#
# @brief Makefile for the TASKING Toolchain to build Infineon AURIX code
#
#
# @details  This Makefile defines project specific settings used for TriCore
# 			AURIX MCUs provided by Infineon.
# 			In the end of this file the core makefile is called which holds all
# 			general rules.
#
#
# Revision History of changes.
#
# 	Date		| Author    | Revision	| Change Description

#  -- DO NOT CHANGE THIS WITHOUT KNOWING WHAT YOU ARE DOING --
#  -------------|-----------|-----------|---------------------
#
#
# @todo
#
#
# @attention
#
#
################################################################################



################################################################################
### Symbols to include #########################################################
-include ../../global_conf.mk


################################################################################
### Set default vaules if nothing to include ###################################
NAME_APP ?= lmos52042_lib
TYPE_ARCHITECTURE ?= tc1.6.x
TYPE_CPU ?= tc23x


################################################################################
### Path settings ##############################################################
PATH_TOOLCHAIN = ../../TOOLS/tasking/ctc
PATH_VPATH ?= .
PATH_THIRDPARTY = $(PATH_MISBUILD)/TOOLS/templates/mi_ooc_template


PATH_STDLSL ?= $(PATH_TOOLCHAIN)/include.lsl
PATH_STDLIB ?= $(PATH_TOOLCHAIN)/lib/$(subst .,,$(TYPE_ARCHITECTURE))
PATH_STDINC ?= $(PATH_TOOLCHAIN)/include


################################################################################
### Special files in other locations to include into the build #################

FILE_PREOBJ ?=
FILE_POSTOBJ ?=
FILE_PRELIB ?=
FILE_POSTLIB ?=
FILE_LIBSTD ?=
FILE_PREPROCESSORINC ?=
FILE_ASSEMBLERINC ?=
FILE_COMPILER_APP ?=
FILE_COMPILER_OS ?=
FILE_COMPILER_BSW ?=
FILE_COMPILER_DRIVER ?=
FILE_COMPILER_CONFIG ?=

FILE_LSL ?= $(TYPE_CPU).lsl
#FILE_LSL = haq4.lsl
#FILE_LSL =$(PATH_STARTUPCODE)/Lcf_Tasking.lsl

FILE_STARTUPCODE ?= $(PATH_STARTUPCODE)/cstart.c
#FILE_STARTUPCODE ?= $(PATH_STARTUPCODE)/plzcstart.c
#FILE_STARTUPCODE ?= $(PATH_STARTUPCODE)/IfxCpu_CStart0.c
#FILE_STARTUPCODE ?=


################################################################################
### Project configuration ######################################################
USAGE_MULTICORE ?=N
USAGE_VERBOSE ?=N
USAGE_TOOLEXPLICIT ?=N
USAGE_WARNING_AS_ERROR ?=Y
USAGE_TOOLSEXPLICIT ?=N
USAGE_SCANDEPTH ?=9
USAGE_CHECKONLY ?=N
USAGE_DEBUGSYMBOLS ?=N
USAGE_OPTIMIZE ?=2
USAGE_PROFILING ?=N
USAGE_CORE ?=
USAGE_BACKWARDSLASH =N
USAGE_OUTPUTIHEX ?=Y
USAGE_OUTPUTELF ?=Y
USAGE_OUTPUTSREC ?=N
USAGE_OUTPUTMAP =Y
LIMIT_ERROR ?= 1000000


ifeq ($(USAGE_VERBOSE),Y)
USAGE_EXPOSE ?=
else
USAGE_EXPOSE ?=@
endif


ifeq ($(USAGE_CORE), )
ifeq ($(USAGE_MULTICORE),Y)
USAGE_CORE=vtc
else
USAGE_CORE=tc0
endif
endif


TYPE_INTERMEDIATEFILE =o


USAGE_FLASHCOMMAND =


################################################################################
### Toolchain to use ###########################################################
ifeq ($(USAGE_TOOLEXPLICIT),Y)
CC:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/ctc"
AS:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/astc"
LD:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/ltc"
AR:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/artc"
HX:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/tricore-objcopy"
else
CCC:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/cctc"
CC:=$(CCC)
AS:=$(CCC)
LD:=$(CCC)
AR:=$(USAGE_EXPOSE)"$(PATH_TOOLCHAIN)/bin/artc"
HX:=$(CCC)
endif


################################################################################
### Archiver flags #############################################################
ARFLAGS = -ru


################################################################################
### Global flags ###############################################################
GLOBALFLAGS = --keep-temporary-files \
			   --error-limit=${LIMIT_ERROR} \
				--address-size=4 \
				--force-munch \
				--show-c++-warnings \
				--make-target=$(PATHOUT_OTHER)/$(NAME_APP).app \
				-D_TASKING_C_TRICORE_


#CURRENTLY UNUSED OR NOT NEEDED FLAGS.
#	-DSTART_WITH_IF\
#	-D__NO_CSTART_DEFAULTARGET_CONFIG\
# 	-D__CTC__=1\
			#	--mil-link\
			#	--mil-split\


ifeq ($(USAGE_CHECKONLY),Y)
GLOBALFLAGS += --check\
			 --link-only
endif

ifeq ($(USAGE_DEBUGSYMBOLS),Y)
GLOBALFLAGS += --diag=text:all \
			--keep-output-files \
			--error-file=error.txt \
			--diag=text:all > ccerror.txt \
			--dep-file=$(NANE_APP).dep
endif

ifeq ($(USAGE_WARNING_AS_ERROR),Y)
GLOBALFLAGS += --warnings-as-errors\
			--no-warnings
endif

ifeq ($(USAGE_VERBOSE),Y)
GLOBALFLAGS += --dry-run \
			--verbose
endif

ifeq ($(USAGE_PROFILING),Y)
GLOBALFLAGS += --profile=+block,+callgraph,+function,+interrupt,+static,+time
endif
#CURRENTLY UNUSED OR NOT NEEDED FLAGS.
#--cpu=$(CPU_TYPE)
#--lsl-core=$(USAGE_CORE)
#--core=$(ARCHITECTURE_TYPE)\
#--global-type-checking\

################################################################################
### Compiler flags #############################################################
CFLAGS =  -Wc--no-warnings=500,537\
	$(foreach tmp_inc,$(PATH_ALLHEADER),$(patsubst %,-Wc-I%,$(tmp_inc))) \
	$(foreach tmp_inc,$(PATH_COMPILERINC),$(patsubst %,-I%,$(tmp_inc))) \
	$(foreach tmp_inc,$(PATH_PREPROCESSORINC),$(patsubst %,-Wc-I%,$(tmp_inc))) \
	$(foreach tmp_inc,$(FILE_PREPROCESSORINC),\
	$(patsubst %,-I%,$(dir $(tmp_inc)))) \
		   -Wc--iso=99\
		   -Wc--language=+gcc,+volatile,-strings,+kanji,+comments\
		   -Wc--uchar\
		   -Wc--switch=auto\
		   -Wc--align=0\
		   -Wc--default-near-size=0\
		   -Wc--default-a0-size=0\
		   -Wc--default-a1-size=0\
		   -Wc--inline-max-size=10\
		   -Wc--inline-max-incr=10\
		   -Wc--compact-max-size=20\
		   -Wc--tradeoff=4\
		   -Wc--max-call-depth=-1\
		   -Wc--debug-info=all\
		   -Wc--source\
		   -Wc--switch=auto\
			-Wc--fp-model=+contrac,+float,+nonan,+rewrite,-soft,-trap,-negzero\
			-Wc--misrac-version=2012\
			-Wc--core=$(TYPE_ARCHITECTURE)\
			-Wc--immediate-in-code\
			-Wc--optimize=$(USAGE_OPTIMIZE) \
			--create=object \
 			--output=$(PATHOUT_OBJ)/$(@F)


ifeq ($(USAGE_CHECKONLY),Y)
CFLAGS += -Wc--check
endif

ifeq ($(USAGE_DEBUGSYMBOLS),Y)
CFLAGS += -Wc--debug-info
CFLAGS += -Wc--profile=+block,+callgraph,+function,+interrupt,+static,+time
endif

ifeq ($(USAGE_VERBOSE),Y)
CFLAGS += -Wc--preprocess=+comments,+includes,+list,+make,+noline
endif

ifeq ($(USAGE_WARNING_AS_ERROR),Y)
CFLAGS +=
endif

ifeq ($(USAGE_PROFILING),Y)
CFLAGS +=
endif
#CURRENTLY UNUSED FLAGS
#-Wc--debug-info
#--integer-enumeration\
#-Wc--cert=all\
#-Wc-Oacefgiklmnoprsuvwy,+predict\
#-Wc--indirect-runtime\
#-Wc--indirect
#-Wc--relax-compact-name-check
#-Wc--relax-overlay-name-check
#-Wc--loop=+cache,+instructions,+size,+time,-value\
#-Wc--loop-alignment=32\
#-Wc--loop-cycle-threshold=25\
#-Wc--loop-instruction-threshold=25\
#-Wc--loop-size-threshold=75\
#-Wc--preprocess=-comments,-includes,-list,-make,-noline

###############################################################################
## Assembler flags #############################################################

ASFLAGS = -Wa--error-limit=$(LIMIT_ERROR)\
	 	   -Wa--warnings-as-errors\
		   -Wa--emit-locals=+equs,+symbols\
		   -Wa--optimize=+generics,+instr-size\
			$(foreach tmp_inc,$(FILE_ASSEMBLERINC),$(patsubst 	\
			%,-I%,$(dir $(tmp_inc)))) \
			$(foreach tmp_inc,$(FILE_ASSEMBLERINC),$(patsubst 	\
			%,-L%,$(dir $(tmp_inc)))) \
			$(foreach tmp_inc,$(PATH_ASSEMBLERINC),$(patsubst 	\
			%,-I%,$(tmp_inc)))  \
			$(foreach tmp_inc,$(PATH_ASSEMBLERINC),$(patsubst 	\
			%,-L%,$(tmp_inc)))

ifeq ($(USAGE_CHECKONLY),Y)
ASFLAGS += -Wa--check
endif

ifeq ($(USAGE_DEBUGSYMBOLS),Y)
ASFLAGS += -Wa--list-format=+section,+symbol,+generic-expansion,+eneric,+macro,\
		   		+empty-line,+conditional,+equal,+relocations,+equate-values,\
		   		+wrap-lines,+macro-expansion,+cycle-count,+define-expansion
		   -Wa--list-file=listfile.txt\
		   -Wa--section-info=+list,-console\
		   -Wa--debug-info=+asm,+hll,+local,+smart
endif

ifeq ($(USAGE_VERBOSE),Y)
ASFLAGS +=
endif

ifeq ($(USAGE_WARNING_AS_ERROR),Y)
ASFLAGS +=
endif

ifeq ($(USAGE_PROFILING),Y)
ASFLAGS +=
endif
# -Wa-H"sfr/regtc23x.def"\

################################################################################
### Linker flags ###############################################################


LDFLAGS =$(foreach tmp_inc,$(PATH_PRELINKLIB),$(patsubst %,-Wl-L%,$(tmp_inc))) \
        $(foreach tmp_inc,$(PATH_STDLIB),$(patsubst %,-Wl-L%,$(tmp_inc))) \
        $(foreach tmp_inc,$(PATH_POSTLINKLIB),$(patsubst %,-Wl-L%,$(tmp_inc))) \
	 	$(foreach tmp_inc,$(PATH_STARTUPCODE),$(patsubst %,-Wl-I%,$(tmp_inc))) \
		$(foreach tmp_inc,$(PATH_STDLSL),$(patsubst %,-Wl-I%,$(tmp_inc))) \
		   	-Wl--lsl-file=$(FILE_LSL) \
		   	-Wl-OtxycL\
			-Wl--error-limit=${ERROR_LIMIT}\
			-Wl--core=mpe:${USAGE_CORE}\
			-Wl--first-library-first\
			--ignore-default-library-path



ifeq ($(USAGE_OUTPUTIHEX),Y)
LDFLAGS += -Wl--output=$(PATHOUT_OTHER)/$(NAME_APP).hex:IHEX
LDFLAGS += -Wl--hex-record-size=50
endif



ifeq ($(USAGE_OUTPUTELF),Y)
LDFLAGS += -Wl--output=$(PATHOUT_OTHER)/$(NAME_APP).elf:ELF
endif



ifeq ($(USAGE_OUTPUTSREC),Y)
LDFLAGS += -Wl--output=$(PATHOUT_OTHER)/$(NAME_APP).srec:SREC
endif



ifeq ($(USAGE_CHECKONLY),Y)
LDFLAGS += -Wl--no-map-file
LDFLAGS += -Wl--link-only
endif



ifeq ($(USAGE_OUTPUTMAP),Y)
LDFLAGS +=  -Wl--map-file=$(PATHOUT_OTHER)/${NAME_APP}.mapxml:XML\
			-Wl--map-file=$(PATHOUT_OTHER)/${NAME_APP}.map\
		   	-Wl--map-file-format=cdfiklmnoqrsu\
endif



ifeq ($(USAGE_DEBUGSYMBOLS),Y)
LDFLAGS +=
endif



ifeq ($(USAGE_WARNING_AS_ERROR),Y)
LDFLAGS +=
endif



ifeq ($(USAGE_VERBOSE),Y)
LDFLAGS +=
endif



ifeq ($(USAGE_PROFILING),Y)
LDFLAGS +=
endif

#CURRENTLY UNUSED FLAGS
#-Wl--lsl-core=tc0\
#-D__CPU__=tc23x
#-Wl--core=mpe:tc0\
#  --munch
#-incremental
#-Wl--strip-debug
#-Wl----misra-c-report=misra_report.txt


################################################################################
### Include Core Makefile which holding the rules and global stuff #############
include $(PATH_MISBUILD)/TOOLS/makefiles/core_makefile.mk


################################################################################
### EOF ########################################################################
