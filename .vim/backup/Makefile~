
################################################################################
### 				MIS_BUILD  -  TEMPLATE UNITTEST
### 				by:	https://cpputest.github.io/
################################################################################
#
# @file 	CppUTest_Makefile
# @author 	Marco Isarel (MI)
# @date 	2019-03
# @detail   Using cppUTest as a testharnes. For further information and
# 			documentation go to https://cpputest.github.io/
#
#
#
# @copyright This is a modified copy of James Grenning starter template. So
# 			 all rights of this file belogs to him and his team or cppUTest.
#
#
################################################################################






################################################################################
### Include Pathes
################################################################################

# --- Production Code SRC_FILES ---
# Directories which holds headerfiles.
# Put first Header to fake or replace. Afterwards put the
# Directories which holds production header files.
# Because of includeguards first header wins.

# --- CPPUTEST HARNESS INCLUDES ---
INCLUDE_DIRS += $(CPPUTEST_HOME)/include
INCLUDE_DIRS += $(CPPUTEST_HOME)/include/CppUTest
INCLUDE_DIRS += $(CPPUTEST_HOME)/include/CppUTestExt
INCLUDE_DIRS += $(CPPUTEST_HOME)/include/Platforms/eclipse
INCLUDE_DIRS += $(CPPUTEST_HOME)/include/Platforms/Gcc

# --- TEST INCLUDES ---
INCLUDE_DIRS += $(sort $(shell find $(FOLDER_TEST) -type d))
INCLUDE_DIRS += $(sort $(shell find $(FOLDER_DOUBLE) -type d))

# --- FAKE PRODUCTION CODE INCLUDES ---

# --- PATCHED PRODUCTION CODE INCLUDES ---
INCLUDE_DIRS +=


# --- PRODUCTION CODE INCLUDES ---
#INCLUDE_DIRS += $(sort $(shell find $(REAL_HOME) -type d))
#INCLUDE_DIRS += $(REAL_HOME)/app
#INCLUDE_DIRS += $(REAL_HOME)/config
#INCLUDE_DIRS += $(REAL_HOME)/bsw
#INCLUDE_DIRS += $(REAL_HOME)/os
#INCLUDE_DIRS += $(REAL_HOME)/driver
INCLUDE_DIRS += $(REAL_HOME)
#INCLUDE_DIRS += $(sort $(shell find $(PATH_TOOLCHAIN) -type d))



################################################################################
### Production Code
################################################################################


# --- Production Code SRC_FILES ---
# Use SRC_FILES to specifiy individual production
# code files.
# These files are compiled and put into
# a library and links with the test runner.
# This is so that test code can override production code at link time.
#SRC_FILES += example-src/Example.c

SRC_FILES +=



# --- Production Code SRC_DIRS ---
# Use SRC_DIRS to specifiy production directories
# code files.
# These files are compiled and put into a the
# ProductionCode library and links with the test runner

SRC_DIRS += $(REAL_HOME)



################################################################################
### Testcode (Unittests)
################################################################################

# --- TEST_SRC_FILES ---
# TEST_SRC_FILES specifies individual test files to build.  Test
# files are always included in the build and they
# pull in production code from the library
#TEST_SRC_FILES +=$(TEST_HOME_DIR)/Tests/test_dummy.cpp
TEST_SRC_FILES +=





# --- TEST_SRC_DIRS ---
# Like TEST_SRC_FILES, but biulds everyting in the directory like SRC_DIRS.
#TEST_SRC_DIRS += CppUTest
TEST_SRC_DIRS +=$(FOLDER_TEST)/cppUTest
TEST_SRC_DIRS += $(sort $(shell find $(FOLDER_TEST) -type d))





# --- MOCKS_SRC_DIRS ---
# MOCKS_SRC_DIRS specifies a directories where you can put your
# mocks, stubs and fakes (called test doubles).
# You can also just put them in TEST_SRC_DIRS. But MOCKS defined here will be
# linked first.

# MCAL Test files
MOCKS_SRC_DIRS += $(sort $(shell find $(FOLDER_DOUBLE) -type d))



################################################################################
### Libraries to link (compiled by same compiler)
################################################################################

# Additional needed libraries can be added here.
#LD_LIBRARIES += -lm  # specifies math library
#LD_LIBRARIES +=  -L./test-lib -Aurix2SimulinkWrapper
LD_LIBRARIES +=



################################################################################
### Libraries to link (compiled by same compiler)
################################################################################

#a hook to use this makefile to make other targets.
OTHER_MAKEFILE_TO_INCLUDE =










################################################################################
################################################################################
### CppUTest configuration
################################################################################
################################################################################

#Set this to @ to keep the makefile quiet
ifndef SILENCE
	SILENCE = @
endif



ifeq ($(PROJECT_HOME),)
-include	global_conf.mk
-include	../global_conf.mk
-include	../../global_conf.mk
-include	../../../global_conf.mk
-include	../../../../global_conf.mk
-include	../../../../../global_conf.mk
-include	../../../../../../global_conf.mk
-include	../../../../../../../global_conf.mk
-include	../../../../../../../../global_conf.mk
endif



CPPUTEST_HOME ?=$(PROJECT_HOME)/TOOLS/cpputest



REAL_HOME = ../productive2



FOLDER_TEST = test



FOLDER_DOUBLE = double



COMPONENT_NAME = mi_ooc



#The name of the test executable. By default it is '$(COMPONENT_NAME)_tests'
#TEST_TARGET = $(COMPONENT_NAME)_tests



## Turn on CppUMock
##CPPUTEST_USE_EXTENSIONS = N
CPPUTEST_USE_EXTENSIONS = Y



# Build the projekt with debug information symbols
#CPPUTEST_ENABLE_DEBUG = N
CPPUTEST_ENABLE_DEBUG = Y



#Links with overridden new() and delete() function.
# Also with new malloc() ???
#CPPUTEST_USE_MEM_LEAK_DETECTION = N
CPPUTEST_USE_MEM_LEAK_DETECTION = Y



# Use the stdlib in the test harness.
# Set to N to keep the standard C++ library out of the test harness
#CPPUTEST_USE_STD_CPP_LIB = N
CPPUTEST_USE_STD_CPP_LIB = Y



#Turn on the gcov code coverage analysis
CPPUTEST_USE_GCOV = N
#CPPUTEST_USE_GCOV = Y



#Generate a map linker-file
#CPPUTEST_MAPFILE = N
CPPUTEST_MAPFILE = Y



#Use Make's VPATH functionality to support user specification of source files
# and directories that aren't below the user's Makefile in the directory tree,
# SRC_DIRS += ../../lib/foo. It shouldn't be necessary except in the this case.
#CPPUTEST_USE_VPATH = N
CPPUTEST_USE_VPATH = Y



################################################################################
### Outputs configuration
################################################################################

# if you have to use "../" to get to your source path
# the makefile will put the .o and .d files in surprising
# places.
# To make up for each level of "../", add place holder
# sub directories in CPPUTEST_OBJS_DIR
# each "../".  It is kind of a kludge, but it causes the
# .o and .d files to be put under objs.
# e.g. if you have "../../src", set to "test-objs/1/2"
# This is set no "../" in the source path.



# A directory where o and d files go
CPPUTEST_OBJS_DIR = OUT/obj



#A directory where libs go
CPPUTEST_LIB_DIR = OUT/lib



#Influences how the outputs are generated by modifying the CPPUTEST_OBJS_DIR
# and CPPUTEST_LIB_DIR: It generatesa a sub-directory under the normal objs
# and lib directories named as the TARGET platform. It also modifies where
# to search for the CPPUTEST_LIB to link against.
TARGET_PLATFORM =



################################################################################
## Pre-Processor, Compiler, Linker Flags
################################################################################

#Default warnings by the MakefileWorker.mk
ifndef CPPUTEST_WARNINGFLAGS
CPPUTEST_WARNINGFLAGS = -Wall
CPPUTEST_WARNINGFLAGS += -Werror
CPPUTEST_WARNINGFLAGS += -Wextra
CPPUTEST_WARNINGFLAGS += -Wswitch-default
CPPUTEST_WARNINGFLAGS += -Wno-pedantic
CPPUTEST_WARNINGFLAGS += -Wno-shadow
CPPUTEST_WARNINGFLAGS += -Wshadow
CPPUTEST_WARNINGFLAGS += -Wswitch-default
CPPUTEST_WARNINGFLAGS += -Wswitch-enum
CPPUTEST_WARNINGFLAGS += -Wconversion
CPPUTEST_WARNINGFLAGS += -Wno-long-long

endif



ifndef CPPUTEST_CXX_WARNINGFLAGS
CPPUTEST_CXX_WARNINGFLAGS = -Woverloaded-virtual

endif



ifndef CPPUTEST_C_WARNINGFLAGS
CPPUTEST_C_WARNINGFLAGS = -Wstrict-prototypes
#CPPUTEST_C_WARNINGFLAGS += -Wno-strict-prototypes

endif



################################################################################
### General Warning and No-Warning Flags
### https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options
################################################################################

CPPUTEST_WARNINGFLAGS += -Wfatal-errors
CPPUTEST_WARNINGFLAGS += -Wno-comments
CPPUTEST_WARNINGFLAGS += -Wno-error=pedantic
CPPUTEST_WARNINGFLAGS += -Wno-error=unknown-pragmas
CPPUTEST_WARNINGFLAGS += -Wno-error=old-style-declaration
CPPUTEST_WARNINGFLAGS += -Wno-shadow
CPPUTEST_WARNINGFLAGS += -Wno-error=int-conversion
#CPPUTEST_WARNINGFLAGS += -Wno-format-nonliteral
#CPPUTEST_WARNINGFLAGS += -Wno-sign-conversion
#CPPUTEST_WARNINGFLAGS += -Wno-missing-field-initializers
#CPPUTEST_WARNINGFLAGS += -Wno-error=misleading-indentation





#--- Clang only ----------------------------------------------------------------
ifeq ($(shell $(CC) -v 2>&1 | grep -c "clang"), 1)
# C-Lang additinal compiler warning flags for C and C++
#https://clang.llvm.org/docs/UsersManual.html

#CPPUTEST_WARNINGFLAGS += -Wno-covered-switch-default
#CPPUTEST_WARNINGFLAGS += -Wno-unknown-warning-option
CPPUTEST_WARNINGFLAGS += -Wno-reserved-id-macro
#CPPUTEST_WARNINGFLAGS += -Wno-keyword-macro
CPPUTEST_WARNINGFLAGS += -Wno-documentation
#CPPUTEST_WARNINGFLAGS += -Wno-missing-noreturn
CPPUTEST_WARNINGFLAGS += -ferror-limit=10
CPPUTEST_WARNINGFLAGS += -Wno-unused-command-line-argument
endif
#-------------------------------------------------------------------------------



################################################################################
### Flags for the Pre-Processor
### https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html
################################################################################

CPPUTEST_CPPFLAGS +=-D__USE_TDD__=2



################################################################################
### Flags for the C complier
### https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html
################################################################################
CPPUTEST_CFLAGS += -Wall
CPPUTEST_CFLAGS += -pedantic
CPPUTEST_CFLAGS += -Wno-missing-prototypes
CPPUTEST_CFLAGS += -Wno-strict-prototypes
CPPUTEST_CFLAGS += -O0 -g3 -Wall -c -fmessage-length=0
CPPUTEST_CFLAGS += -g3
CPPUTEST_CFLAGS += -Wall
CPPUTEST_CFLAGS += -c
CPPUTEST_CFLAGS += -fmessage-length=0
CPPUTEST_CFLAGS += -mwindows
CPPUTEST_CFLAGS += -fms-extensions



################################################################################
### Flags for the C++ compiler
################################################################################

# If you get an error like this
#     TestPlugin.h:93:59: error: 'override' keyword is incompatible
#        with C++98 [-Werror,-Wc++98-compat] ...
# The compiler is basically telling you how to fix the
# build problem.  You would add this flag setting
#     CPPUTEST_CXXFLAGS += -Wno-c++14-compat
CPPUTEST_CXXFLAGS += -Wno-c++14-compat
CPPUTEST_CXXFLAGS += --std=c++11
CPPUTEST_CXXFLAGS += -Wno-c++98-compat-pedantic
CPPUTEST_CXXFLAGS += -Wno-c++98-compat



################################################################################
### Linker Flags
### https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html
################################################################################

CPPUTEST_LDFLAGS +=
#CPPUTEST_LDFLAGS += -Wl,-image-base -Wl,0x10000000



################################################################################
### Run CppUTest core
################################################################################

include $(CPPUTEST_HOME)/build/MakefileWorker.mk




################################################################################
### EOF ########################################################################
