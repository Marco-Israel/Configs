/*
 * sio.h
 *
 *  Created on: 16.04.2019
 *      Author: Z602900
 */


#ifndef SIO_H_
#define SIO_H_
#include "lemdd_io.h"
#include "StdIf/IfxStdIf_Timer.h"

/* Supported Coding shemes by SIO Driver.*/
typedef enum
{
	SIO_coding_sheme_MANCHESTER_FALLING_EDGE, 		/*!<Manchester Coding, where a falling edge indicates a positive bit*/
	SIO_coding_sheme_MANCHESTER_RISING_EDGE   		/*!<Manchester coding, where a rising edge indicates a positive bit*/
} SIO_coding_sheme;


/*Indicates which interrupt shall be handled*/
typedef enum
{
	sio_interrupt_mode_IGNORE	= 0x00,				/*!< Ignore  Interrupts*/
	sio_interrupt_mode_RECEIVE 	= 0x01,				/*!< Receive Interrupt Handler*/
	sio_interrupt_mode_TRANSMIT = 0x02,				/*!< Transmit Interrupt Hanler*/
} sio_interrupt_handler_mode;

/*Current transmission state. Used internally by ISR.*/
typedef enum
{
	sio_bitPosition_START  		= 0x00,				/*!< Bitposition at start signal*/
	sio_bitPosition_1  			= 0x01,				/*!< First Bit of byte, which means 0b10000000*/
	sio_bitPosition_2 			= 0x02,				/*!< second Bit of byte, which means 0b01000000*/
	sio_bitPosition_3 			= 0x03,				/*!< third Bit of byte, which means 0b00100000*/
	sio_bitPosition_4 			= 0x04,				/*!< fourth Bit of byte, which means 0b00010000*/
	sio_bitPosition_5 			= 0x05,				/*!< fifth Bit of byte, which means 0b00001000*/
	sio_bitPosition_6 			= 0x06,				/*!< sixth Bit of byte, which means 0b00000100*/
	sio_bitPosition_7 			= 0x07,				/*!< seventh Bit of byte, which means 0b00000010*/
	sio_bitPosition_8 			= 0x08,				/*!< eighth Bit of byte, which means 0b00000001*/
	sio_bitPosition_LOWPHASE	= 0x09,				/*!< LowPhase transmission*/
	sio_bitPosition_FINISHED 	= 0x0A				/*!< Transmission finished.*/
} sio_bitPosition;

typedef union
{
	sio_interrupt_handler_mode e;
	uint8_t raw;
} sio_interrupt_handler_status;						/*Interrupt handler status.*/

/*Struct for Interrupt handler. Used internally only.*/
typedef struct
{
	uint8_t 						isr_counter;
	uint8_t 						txByte;				 /*!< Byte to be transmitted*/
	uint8_t							rxByte;				/*!< Received Byte*/
	sio_bitPosition 				txBitPos;			/*!< Current Bitposition to be transmitted*/
	sio_bitPosition 				rxBitPos;			/*!< Current Bitposition to be transmitted*/
	uint8_t							bit_sendIR; 		/*!< Indicates whether we are beginning with transmission of a specific bit or finishing it off*/
	sio_interrupt_handler_status 	isr_mode;	 		/*!< Indicates Interrupt Mode*/
	uint8_t							*rx_buf;			/*!< Pointer to ReadBuffer, only valid during receive interrupt*/
	uint16_t						rx_bufLen;			/*!< Length of Readbuffer*/
	uint16_t						rx_bufPos;			/*!< Current Buffer position*/

} sio_interrupt_struct;

/*SIO_Module struct*/
typedef struct
{
  lemdd_io_pin_s 					*io_pin;			/*!< Pin used for transmission and receive.*/
  SIO_coding_sheme 					coding_sheme;		/*!< The coding sheme SIO Module should operate.*/
  IfxStdIf_Timer 					*timer;				/*!< The timer to be used by SIO_Module for transmitting and receiving.*/
  volatile sio_interrupt_struct 	interrupt_struct; 	/*!< internally used Interrupt handler.*/
  uint8_t							bitTime;
  uint8_t							timerPeriod;
} SIO_Module;

/* IMPORTANT :This method must be placed by application in the timer Interrupt ISR
 * Handles SIO_Interrupt, if a value needs to be transmitted or received.
 *
 *@param sio_module			Pointer to Sio_module where interrupt should be handled.
 * */
void sio_interrupt_handler(SIO_Module *sio_module);


/* SIO_transmitByte
 *
 * Transmits a Single Byte. Blocks until transmission finished.
 *
 * @param module			Pointer to SIO_module which should transmit message
 * @param byte				Byte to be transmitted.
 * */
void SIO_transmitByte(SIO_Module *module,uint8_t byte);

/*
 * SIO_init
 *
 * Initiallizes SIO_Module struct for data transfer.
 *
 *	@param	module			struct to become initiallized
 *	@param	io_pin			pointer to initiallized SIO_Pin.
 *	@param	timer			Pointer to initiallized ILLD Timer. Should not run right now.
 *	@param	coding_sheme	Coding sheme to be used by SIO Module
 *
 * */
void SIO_init(SIO_Module *module, lemdd_io_pin_s* io_pin,IfxStdIf_Timer *timer,SIO_coding_sheme sheme, uint8_t bitTime,uint8_t timerPeriod);

/*
 * NOT IMPLEMENTED !
 *
 * */
void SIO_receiveByte(SIO_Module *module,uint8_t *byte);

/*
 *
 * NOT IMPLEMENTED
 *
 * */
void SIO_beginReceive(SIO_Module *module);

/*
 * NOT IMPLEMENTED
 * */
uint8_t SIO_TryendReceive(SIO_Module *module, uint8_t *byte);

#endif /* SIO_H_ */
