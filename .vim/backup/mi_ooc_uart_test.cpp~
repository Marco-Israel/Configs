
/**
 * @file 	mi_ooc_uart.cpp
 * @author 	Marco Isarel (MI)
 * @date 	2019-06
 * @ingroup cppUTest
 * @copyright Copyright (c) 2019 Marco Israel
 *
 *
 * @brief Test uart functions
 *
 *
 * @details Test uart functions
*/


#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockSupport.h"


extern "C" {
#include "mi_ooc_uart.h"
}


static uart__this__st this__S;
static uart__ctorParamList__st ctorParamList__S;



static uint8_t _send_MOCK(uart__this__st *const ps__this,
    uint8_t *const pa__source, uint8_t bytesToSend)
{

    mock().actualCall("send")
        .withConstPointerParameter("ps__this", ps__this)
        .withPointerParameter("pa__source", pa__source)
        .withParameter("bytesToSend", bytesToSend);

    return 0;


}




static void expactOneCall__uartReceive(uart__this__st *const ps__this,
    uint8_t *const pa__destination, uint8_t maxLength)
{
        mock()
            .expectOneCall("receive")
            .withConstPointerParameter("ps__this", ps__this)
            .withPointerParameter("pa__destination", pa__destination)
            .withParameter("maxLength", maxLength);
}

static uint8_t _receive_MOCK(uart__this__st *const ps__this,
    uint8_t *const pa__destination, uint8_t maxLength)
{

    mock().actualCall("receive")
        .withConstPointerParameter("ps__this", ps__this)
        .withPointerParameter("pa__destination", pa__destination)
        .withParameter("maxLength", maxLength);

    return 0;
}







static void expactOneCall__uartSend(uart__this__st *const ps__this,
    uint8_t *const pa__source, uint8_t bytesToSend)
{
        mock()
            .expectOneCall("send")
            .withConstPointerParameter("ps__this", ps__this)
            .withPointerParameter("pa__source", pa__source)
            .withParameter("bytesToSend", bytesToSend);
}





TEST_GROUP(MI_OOC_UART_TG)
{



    void setup()
    {
        ctorParamList__S.attribute__S.hwNr = 1;
    uart__new(&this__S, &ctorParamList__S);

        uart__vFTable__st* ps__vFTable =  _uart__getPt_vFTable();
       UT_PTR_SET(ps__vFTable->virtualOperation__S.pf__uartSend,&_send_MOCK);
        UT_PTR_SET(ps__vFTable->virtualOperation__S.pf__uartReceive,
                &_receive_MOCK);
    }

    void teardown()
    {
    mock().checkExpectations();
    mock().clear();

    }
};


TEST(MI_OOC_UART_TG, 1__hwNr_is_set)
{

    LONGS_EQUAL(1, this__S.attribute__S.hwNr);

}


TEST(MI_OOC_UART_TG, 2__hwNr_is_cleard)
{
    uart__deleate(&this__S);

    LONGS_EQUAL(0, this__S.attribute__S.hwNr);

}


TEST(MI_OOC_UART_TG, 3__mock_call_to_send)
{

    uint8_t buffer[5];
    expactOneCall__uartSend(&this__S, &buffer[0], 5);
    uart__send(&this__S, &buffer[0], 5);
}




TEST(MI_OOC_UART_TG, 4__mock_call_to_receive)
{

    uint8_t buffer[5];
    expactOneCall__uartReceive(&this__S, &buffer[0], 5);
    uart__receive(&this__S, &buffer[0], 5);
}



TEST(MI_OOC_UART_TG, 5__vFTable_is_init_after_call_to_new)
{

    POINTERS_EQUAL(this__S.ps__virtualOperation,_uart__getPt_vFTable());

}
