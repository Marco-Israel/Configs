################################################################################
### 					MIS_BUILD  -  CORE MAKEFILE
################################################################################
#
# @file  	core_makefile.mk
# @author 	Marco Isarel (MI)
# @date 	2019-03
#
# @brief Core makefile for the LE-Buildsystem
#
#
# @details  This file holds all the globale rules and setting which are
# 			used by project spcific makefiles.
#
#
# Revision History of changes.
#
# 	Date		| Author    | Revision	| Change Description

#  -- DO NOT CHANGE THIS WITHOUT KNOWING WHAT YOU ARE DOING --
#  -------------|-----------|-----------|---------------------
#
#
# @todo
#
#
# @attention This file is included by other makefiles out of the projects.
#
#
################################################################################




################################################################################
### IMPOTED variables e.g. via shell command
################################################################################
HEXFILE ?=







################################################################################
### Path and location settings
################################################################################

PATH_MISBUILD = $(call FUNCTION_BsToFs,$(PATH_BUILDENVIRONMENTROOT))

PATH_PROJECT ?= $(PATH_MISBUILD)/$(NAME_APP)/project

PATH_APP ?= $(PATH_PROJECT)/app

PATH_OS ?= $(PATH_PROJECT)/os

PATH_BSW ?= $(PATH_PROJECT)/bsw

PATH_PRELINK ?= $(PATH_PROJECT)/prebuild

PATH_POSTLINK ?= $(PATH_PROJECT)/postbuild

PATH_PRELINKOBJ ?= $(PATH_PROJECT)/prebuild/objects

PATH_PRELINKLIB ?= $(PATH_PROJECT)/prebuild/libraries

PATH_PRELINKHDR ?= $(PATH_PROJECT)/prebuild/header

PATH_PRELINKSRC ?= $(PATH_PROJECT)/prebuild/sources

PATH_POSTLINKOBJ ?= $(PATH_PROJECT)/postbuild/objects

PATH_POSTLINKLIB ?= $(PATH_PROJECT)/postbuild/libraries

PATH_POSTLINKHDR ?= $(PATH_PROJECT)/postbuild/header

PATH_POSTLINKSRC ?= $(PATH_PROJECT)/postbuild/sources

PATH_DRIVER ?= $(PATH_PROJECT)/driver/$(TYPE_CPU)

PATH_CONFIG ?= $(PATH_PROJECT)/config

PATH_STARTUPCODE ?= $(PATH_PROJECT)/startup

PATH_PREPROCESSORINC ?= $(PATH_PROJECT)/include/preprocessor

PATH_COMPILERINC ?= $(PATH_PROJECT)/include/compiler

PATH_ASSEMBLERINC ?= $(PATH_PROJECT)/include/assembler

PATHOUT_OBJ ?= $(PATH_PROJECT)/OUT/objects

PATHOUT_LIB ?= $(PATH_PROJECT)/OUT/libraries

PATHOUT_OTHER ?= $(PATH_PROJECT)/OUT/others

PATH_THIRDPARTY ?=

FILE_LSL ?=

FILE_STARTUPCODE ?=

################################################################################
### Tools to use
################################################################################

RM ?= $(USAGE_EXPOSE)$(PATH_MISBUILD)/TOOLS/gnu_win32/bin/rm.exe -f

FIND ?= $(USAGE_EXPOSE)$(PATH_MISBUILD)/TOOLS/gnu_win32/bin/find.exe -name

ECHO ?= $(USAGE_EXPOSE)echo.exe

MAKE := $(USAGE_EXPOSE)$(MAKE) -s -e

CTAGS ?= $(USAGE_EXPOSE) ctags -R -f $(PATHOUT_OTHER)/tags.out

CSCOPE ?= $(USAGE_EXPOSE) cscope -R -b -f $(PATHOUT_OTHER)/scope.out




################################################################################
### Default settings if not specified (overwritten) elsewhere
################################################################################

USAGE_EXPOSE ?=@


USAGE_MULTICORE ?=N



USAGE_VERBOSE ?=Y



USAGE_TOOLEXPLICIT ?=N



USAGE_WARNING_AS_ERROR ?=Y



USAGE_TOOLSEXPLICIT ?=N



USAGE_SCANDEPTH ?=9



USAGE_CHECKONLY ?=N



USAGE_DEBUGSYMBOLS ?=N



USAGE_OPTIMIZE ?=2



USAGE_BACKWARDSLASH ?=N



USAGE_PUTIHEX ?=Y



USAGE_PUTELF ?=Y



USAGE_PUTCOFF ?=N



LIMIT_ERROR ?=1



USAGE_MAP ?=Y



USAGE_MISRA ?=Y



USAGE_UTEST_THIRDPARTY ?=Y



USAGE_UTEST_PRODUCTIVE ?=Y



USAGE_FLASHCOMMAND ?=$(ECHO) "No Flashcommand configurard"



USAGE_FORMATCOMMAND ?= $(USAGE_EXPOSE) 										\
					$(PATH_MISBUILD)/TOOLS/codeFormat/clang-format.exe 		\
					-style=file -fallback-style=none



USAGE_CHECKCOMMAND ?= $(USAGE_EXPOSE) 										\
					  $(PATH_MISBUILD)/TOOLS/cppcheck-master/cppcheck.exe  	\
			--addon=$PROJECT_HOME/TOOLS/cppcheck-master/addons/misra.json 	\
			--enable=all --platform=win32W 									\
			--output-file=$(PATHOUT_OTHER)/cppcheckResult.txt 				\
			--std=c99 --template=gcc 										\
	$(foreach tmp_inc,$(PATH_ALLHEADERDIR),$(patsubst %,-I%,$(tmp_inc))) 	\
	$(foreach tmp_inc,$(PATH_ALLHEADERDIR),$(patsubst %,-I%,$(tmp_inc))../) \
	$(foreach tmp_inc,$(PATH_ALLHEADERDIR),$(patsubst %,-I%,$(tmp_inc))../..)



################################################################################
### Internael functions
################################################################################

FUNCTION_toLower ?=$(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,\
			 	$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,\
			 	$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,\
			 	$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,\
			 	$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,\
			 	$(subst Z,z,$1))))))))))))))))))))))))))





FUNCTION_toUpper ?=$(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,\
			 	$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,$(subst j,J,\
			 	$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,\
			 	$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,$(subst t,T,\
			 	$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,\
			 	$(subst z,Z,$1))))))))))))))))))))))))))





FUNCTION_FsToBs ?= $(subst /,\,$(1))





FUNCTION_BsToFs ?= $(subst \,/,$(1))





################################################################################
### MAKE internael configuration
################################################################################

ifeq ($(USAGE_BACKWARDSLASH),Y)


PATH_PROJECT := $(call FUNCTION_BsTofs,$(PATH_PROJECT))

PATH_TOOLCHAIN := $(call FUNCTION_BsTofs,$(PATH_TOOLCHAIN))

PATH_APP := $(call FUNCTION_BsTofs,$(PATH_APP))

PATH_OS := $(call FUNCTION_BsTofs,$(PATH_OS))

PATH_BSW := $(call FUNCTION_BsTofs,$(PATH_BSW))

PATH_PRELINKOBJ := $(call FUNCTION_BsTofs,$(PATH_PRELINKOBJ))

PATH_PRELINKSRC := $(call FUNCTION_BsTofs,$(PATH_PRELINKSRC))

PATH_PRELINKHDR := $(call FUNCTION_BsTofs,$(PATH_PRELINKHDR))

PATH_PRELINKLIB := $(call FUNCTION_BsTofs,$(PATH_PRELINKLIB))

PATH_POSTLINKOBJ := $(call FUNCTION_BsTofs,$(PATH_POSTLINKOBJ))

PATH_POSTLINKSRC := $(call FUNCTION_BsTofs,$(PATH_POSTLINKSRC))

PATH_POSTLINKLIB := $(call FUNCTION_BsTofs,$(PATH_POSTLINKLIB))

PATH_POSTLINKHDR := $(call FUNCTION_BsTofs,$(PATH_POSTLINKHDR))

PATH_DRIVER := $(call FUNCTION_BsTofs,$(PATH_DRIVER))

PATH_CONFIG := $(call FUNCTION_BsTofs,$(PATH_CONFIG))

PATH_STARTUPCODE := $(call FUNCTION_BsTofs,$(PATH_STARTUPCODE))

PATH_STDLSL := $(call FUNCTION_BsTofs,$(PATH_STDLSL))

PATH_STDLIB := $(call FUNCTION_BsTofs,$(PATH_STDLIB))

PATH_STDINC := $(call FUNCTION_BsTofs,$(PATH_STDINC))

PATH_PREPROCESSORINC := $(call FUNCTION_BsTofs,$(PATH_PREPROCESSORINC))

PATH_COMPILERINC := $(call FUNCTION_BsTofs,$(PATH_COMPILERINC))

PATH_ASSEMBLERINC := $(call FUNCTION_BsTofs,$(PATH_ASSEMBLERINC))

PATHOUT_OBJ := $(call FUNCTION_BsTofs,$(PATHOUT_OBJ))

PATHOUT_LIB := $(call FUNCTION_BsTofs,$(PATHOUT_LIB))

PATHOUT_OTHER := $(call FUNCTION_BsTofs,$(PATHOUT_OTHER))


endif





################################################################################
### Collecting files
################################################################################

FILE_PREOBJ 		+= $(wildcard $(PATH_PRELINKOBJ)/*.o)

FILE_POSTOBJ 		+= $(wildcard $(PATH_POSTLINKOBJ)/*.o)

FILE_PRELIB 		+= $(wildcard $(PATH_PRELINKLIB)/$(or *.a, *.lib))

FILE_POSTLIB 		+= $(wildcard $(PATH_POSTLINKLIB)/$(or *.a, *.lib))

FILE_PREPROCESSORINC += $(notdir $(foreach tmp_path, $(PATH_PREPROCESSORINC), \
						$(wildcard $(tmp_path)/$(or *.i,*h))))


FILE_ASSEMBLER 		+=  $(notdir $(foreach  tmp_path, $(PATH_ASSEMBLERINC),	\
				   		$(wildcard $(tmp_path)/$(or *.s,*.def))))





FILE_COMPILER_APP 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_APP)/$(temp)))

FILE_COMPILER_OS 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_OS)/$(temp)))

FILE_COMPILER_BSW 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_BSW)/$(temp)))

FILE_COMPILER_DRIVER 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_DRIVER)/$(temp)))

FILE_COMPILER_CONFIG 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_CONFIG)/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/$(temp))))
endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),1 2 3 4 5 6 7 8 9))
FILE_COMPILER_APP 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_APP)/*/$(temp)))

FILE_COMPILER_OS 			+=$(foreach temp,*.c *.h, $(wildcard 			\
	 					  $(PATH_OS)/*/$(temp)))

FILE_COMPILER_BSW 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_BSW)/*/$(temp)))

FILE_COMPILER_DRIVER 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_DRIVER)/*/$(temp)))

FILE_COMPILER_CONFIG 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_CONFIG)/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),2 3 4 5 6 7 8 9))
FILE_COMPILER_APP 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_APP)/*/*/$(temp)))

FILE_COMPILER_OS 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_OS)/*/*/$(temp)))

FILE_COMPILER_BSW 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_BSW)/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_DRIVER)/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_CONFIG)/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),3 4 5 6 7 8 9))
FILE_COMPILER_APP 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_APP)/*/*/*/$(temp)))

FILE_COMPILER_OS 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_OS)/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_BSW)/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_DRIVER)/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_CONFIG)/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),4 5 6 7 8 9))
FILE_COMPILER_APP 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_APP)/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_OS)/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_BSW)/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_DRIVER)/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_CONFIG)/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),5 6 7 8 9))
FILE_COMPILER_APP 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_APP)/*/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_OS)/*/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_BSW)/*/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_DRIVER)/*/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+=$(foreach temp,*.c *.h, $(wildcard 			\
						  $(PATH_CONFIG)/*/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),6 7 8 9))
FILE_COMPILER_APP 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_APP)/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_OS)/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_BSW)/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_DRIVER)/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_CONFIG)/*/*/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/*/*/$(temp))))
endif

endif




ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),7 8 9))
FILE_COMPILER_APP 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_APP)/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_OS)/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_BSW)/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_DRIVER)/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_CONFIG)/*/*/*/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/*/*/*/$(temp))))
endif

endif




ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),8 9))
FILE_COMPILER_APP 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_APP)/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_OS)/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_BSW)/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_DRIVER)/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_CONFIG)/*/*/*/*/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY), 		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/*/*/*/*/$(temp))))
endif

endif





ifeq ($(USAGE_SCANDEPTH),$(filter $(USAGE_SCANDEPTH),9))
FILE_COMPILER_APP 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_APP)/*/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_OS 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_OS)/*/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_BSW 			+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_BSW)/*/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_DRIVER 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_DRIVER)/*/*/*/*/*/*/*/*/*/$(temp)))

FILE_COMPILER_CONFIG 		+= $(foreach temp,*.c *.h, $(wildcard 			\
						   $(PATH_CONFIG)/*/*/*/*/*/*/*/*/*/$(temp)))

ifneq ($(PATH_THIRDPARTY),)
FILE_COMPILER_THIRDPARTY 	+=$(foreach tmp_folder,$(PATH_THIRDPARTY),		\
							$(foreach temp,*.c *.h, $(wildcard 				\
						   	$(tmp_folder)/*/*/*/*/*/*/*/*/*/$(temp))))
endif

endif




################################################################################
### Search pathes
################################################################################
#
#PATH_ALLHEADERDIR = $(sort $(PATH_PRELINKHDR) $(foreach temp, 				\
#	$(FILE_COMPILER_APP) $(FILE_COMPILER_OS) $(FILE_COMPILER_BSW)  			\
#	$(FILE_COMPILER_DRIVER) $(FILE_COMPILER_CONFIG) $(PATH_STARTUPCODE) 	\
#	$(FILE_COMPILER_THIRDPARTY), $(dir $(filter %.h,$(temp)))) 				\
#	$(PATH_COMPILERINC) $(PATH_STDINC) ) $(PATH_POSTLINKHDR)
#
#
#
#PATH_ALLSOURCDIR = $(PATH_PRELINKSRC) $(sort $(foreach temp, 				\
#	$(FILE_COMPILER_APP) $(FILE_COMPILER_OS) $(FILE_COMPILER_BSW) 			\
#	$(FILE_COMPILER_DRIVER) $(FILE_COMPILER_CONFIG) $(FILE_COMPILER_THIRDPARTY)\
#	,$(dir $(filter %.c, $(temp)))) $(PATH_STARTUPCODE)) $(PATH_STDLIB) 	\
#	$(PATH_POSTLINKSRC)
#
#
#
#vpath %.h $(PATH_ALLHEADERDIR)
#
#
#
#vpath %.c $(PATH_ALLSOURCDIR)
#
#
#
#vpath %.$(TYPE_INTERMEDIATEFILE) $(PATH_PRELINKOBJ) $(PATHOUT_OBJ) 			\
#		$(PATHOUT_OTHER) $(PATH_POSTLINKOBJ) $(PATH_STARTUPCODE)
#
#
#
#vpath %.a $(PATH_PRELINKLIB) $(PATHOUT_LIB) $(PATH_STDLIB) $(PATH_POSTLINKLIB)
#
#
#
#vpath %.lib $(PATH_PRELINKLIB) $(PATHOUT_LIB) $(PATH_STDLIB) $(PATH_POSTLINKLIB)
#
#
#
#vpath %.lsl $(PATH_STARTUPCODE) $(PATH_STDLSL)
#
#
#
#VPATH += $(PATH_VPATH) $(PATH_PROJECT) $(PATH_TOOLCHAIN)
#
#
#
#
#
#################################################################################
#### Targets to build
#################################################################################
#
#TARGET_APP = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, 		\
#			 $(FILE_COMPILER_APP), $(filter %.c, $(notdir $(temp)))))
#
#
#
#
#
#TARGET_OS = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, 		\
#			$(FILE_COMPILER_OS), $(filter %.c, $(notdir $(temp)))))
#
#
#
#
#
#TARGET_BSW = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, 		\
#			 $(FILE_COMPILER_BSW), $(filter %.c,$(notdir $(temp)))))
#
#
#
#
#
#TARGET_DRIVER = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, 	\
#				$(FILE_COMPILER_DRIVER),$(filter %.c,$(notdir $(temp)))))
#
#
#
#
#
#TARGET_CONFIG = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, 	\
#				$(FILE_COMPILER_CONFIG),$(filter %.c, $(notdir $(temp)))))
#
#
#
#
#
#TARGET_PRELINK = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE), $(notdir 		\
#				 $(wildcard $(PATH_PRELINKSRC)/*.c)))
#
#
#
#
#
#TARGET_POSTLINK = $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE), $(notdir 		\
#				  $(wildcard $(PATH_POSTLINKSRC)/*.c)))
#
#
#
#
#
#ifneq ($(PATH_THIRDPARTY),)
#TARGET_THIRDPARTY ?= $(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE),$(foreach temp, \
#				$(FILE_COMPILER_THIRDPARTY),$(filter %.c, $(notdir $(temp)))))
#
#endif
#
#
#
#
#
#ifeq ($(FILE_STARTUPCODE),)
#TARGET_STARTUPCODE =$(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE), $(notdir 	\
#					$(FILE_STARTUPCODE)))
#else
#TARGET_STARTUPCODE =$(patsubst %.c,%.$(TYPE_INTERMEDIATEFILE), $(notdir 	\
#					$(wildcard $(PATH_STARTUPCODE)/*.c)))
#endif
#
#
#
#
#
#ifeq ($(TARGET_THIRDPARTY),)
#
#FILE_TARGETLIBS ?= $(addprefix $(PATHOUT_LIB)/,libstartup.a libprelink.a 	\
#			   libapp.a libdriver.a libconfig.a libbsw.a libos.a libpostlink.a)
#
#else
#
#FILE_TARGETLIBS ?= libstartup.a libprelink.a libapp.a libdriver.a libconfig.a \
#				   libbsw.a libos.a libthirdparty.a libpostlink.a
#
#endif
#




ifeq ($(HEXFILE),)
TARGET_HEXTOFLASH =$(PATHOUT_OTHER)/$(NAME_APP).hex
else
TARGET_HEXTOFLASH =$(HEXFILE)
endif



################################################################################
### EXPORT variables to sub makes
################################################################################

export PATH_ALLSOURCDIR



export PATH_ALLHEADERDIR





################################################################################
################################################################################
### Building Rules
################################################################################
################################################################################

.PHONY: help all app cleanall cleanapp cleantest cleantest3party 			\
	cleantestproductive debugvars echovars dcleanlibapp cleanlibstartup  	\
	cleanlibbsw cleanlibos cleanlibdriver cleanlibconfig cleanprelink 		\
	cleanpostlink flash test allclean testclean testappclean 				\
	test3partyclean testcleanapp testclean3party debugtest debugtestapp 	\
	debugtest3party testdebug testdebugapp testdebugapp buildlibs libapp 	\
	libbsw libos libthirdparty libprebuild libpostbuild libconfig 			\
	test3party 3partytest testthirdpary thirdpartytest 						\
	formatapp appformat formatbsw bswformat formatdriver driveformat 		\
	formatos osformat formatconfig configformat formatthirdparty 			\
	thirdpartyformat 3partyformat format3party formatstartup startuformat 	\
	formatprebuild prebuildformat formatpostbuild postbuildformat checkapp 	\
	appcheck checkbsw bswcheck checkdriver drivercheck checkos oscheck 		\
	checkconfig configcheck checkthirdparty thirdpartycheck 3partycheck 	\
	check3party checkstartup startucheck checkprebuild prebuildcheck 		\
	checkpostbuild postbuildcheck



################################################################################
### Help and debug
################################################################################

help:
	$(ECHO) "------------------------------------------------------------------"
	$(ECHO)  "A warm welcome to MIS_BUILD System"
	$(MAKE) helpEntry
	$(MAKE) helpBuild
	$(MAKE) helpTest
	$(MAKE) helpFlash
	$(MAKE) helpClean
	$(MAKE) helpFormat
	$(MAKE) helpCheck
	$(MAKE) helpDebug





helpEntry:
	$(ECHO) "Following commands are aviable"
	$(ECHO) "------------------------------------------------------------------"





helpBuild:
	$(ECHO) "---------- Build -------------------------------------------------"
	$(ECHO) "make all 					: Build all libs --> run unittest\
 --> build hex, elf, (map, ...) --> flash hex "
	$(ECHO) "make rebuild 					: like make cleanall && make all"
	$(ECHO) "make libs 					: Builds all libs"
	$(ECHO) "make app 					: Links the libs to hex and elf files.\
 also creats a mapfile if enabeld"
	$(ECHO) "------------------------------------------------------------------"





helpTest:
	$(ECHO) "---------- Test --------------------------------------------------"
	$(ECHO) "make test 					: Builds and Runs all unittests"
	$(ECHO) "make test3party 				: Runs all mi_ooc unittests"
	$(ECHO) "make testproductive 				: Runs all productive unittests"
	$(ECHO) "------------------------------------------------------------------"





helpFlash:
	$(ECHO) "---------- Flash -------------------------------------------------"
	$(ECHO) "make flash 					: flash the  hexfile"
	$(ECHO) "make flash HEX=<PATH_and_HEXFILE> 		: flash a hexfile"
	$(ECHO) "------------------------------------------------------------------"





helpCleanup helpClean:
	$(ECHO) "---------- Cleanup -----------------------------------------------"
	$(ECHO) "make cleanall 					: cleanup the productive and\
 unit testfiles"
	$(ECHO) "make cleantest 					: cleanup all unittests"
	$(ECHO) "make cleantest3party 				: cleanup all unittests"
	$(ECHO) "make cleantestproductive 			: cleanup all unittests"
	$(ECHO) "make cleanapp 					: cleanup productive app files "
	$(ECHO) "make cleanallobj 				: Deleats all in $(PATHOUT_OBJ)"
	$(ECHO) "make cleanalllibs				: Deleats all in $(PATHOUT_LIB)"
	$(ECHO) "make cleanlibapp 				: Deleats libapp.a"
	$(ECHO) "make cleanlibstartup 	 			: Deleats libstartup.a"
	$(ECHO) "make cleanlibbsw 				: Deleats libbsw.a"
	$(ECHO) "make cleanlibos 				: Deleats libos.a"
	$(ECHO) "make cleanlibdriver 				: Deleats libdriver.a"
	$(ECHO) "make cleanlibconfig 				: Deleats libconfig.a"
	$(ECHO) "make cleanlibprelink 				: Deleats libprelink.a"
	$(ECHO) "make cleanlibpostlink 				: Deleats libpostlink.a"
	$(ECHO) "make cleanlib LIB=<lib_in_OUT_lib)>  		: Deleats a\
 spcific lib provided by LIB variable"
	$(ECHO) "make cleanobj OBJ=<obj_in_OUT_obj)> 		: Deleats a\
 spcific Obj provided by OBJ variable"
	$(ECHO) "------------------------------------------------------------------"





helpDebug:
	$(ECHO) "---------- Debug -------------------------------------------------"
	$(ECHO) "make echovars					: Prints out this Buildinviroments"
	$(ECHO) "make debugvars					: like make echovars"
	$(ECHO) "make echovarsverbose				: Prints out ALL .VARIABLES"
	$(ECHO) "make debugvarsverbose				: like make echovarsverbose"
	$(ECHO) "make debugtest					: debug 3party and productiontest"
	$(ECHO) "make debugtestapp				: debug productiontest call"
	$(ECHO) "make debugtest3party				: debug productiontest call"
	$(ECHO) "------------------------------------------------------------------"




helpCheck:
	$(ECHO) "---------- Code Check --------------------------------------------"
	$(ECHO) "make checkapp					: check code in app folder"
	$(ECHO) "make checkbsw					: check code in bsw folder"
	$(ECHO) "make checkdriver				: check code in driver folder"
	$(ECHO) "make checkos				: check code in os folder"
	$(ECHO) "make checkconfig					: check code in config folder"
	$(ECHO) "make check3party				: check all code in 3party  folders"
	$(ECHO) "make checkprebuild				: check code in prebuild folder"
	$(ECHO) "make checkpostbuild				: check code in postbuild fold"
	$(ECHO) "------------------------------------------------------------------"




helpForma:
	$(ECHO) "---------- Code format and ----------------------------------------"
	$(ECHO) "make formatapp					: format code in app folder"
	$(ECHO) "make formatbsw					: format code in bsw folder"
	$(ECHO) "make formatdriver				: format code in driver folder"
	$(ECHO) "make formatos				: format code in os folder"
	$(ECHO) "make formatconfig					: format code in config folder"
	$(ECHO) "make format3party				: format all code in 3party folders"
	$(ECHO) "make formatprebuild			: format code in prebuild folder"
	$(ECHO) "make formatpostbuild				: format code in postbuild fold"
	$(ECHO) "------------------------------------------------------------------"





debugsymbols echovars debugvars echosymbols:
	$(ECHO) ""
	$(ECHO) "DEBUG SYMBOLS"
	$(ECHO) "----------------------"
	$(ECHO) "--- VARIABLES-------------"
	$(ECHO) "NAME_APP = $(NAME_APP)"
	$(ECHO) "LIMIT_ERROR = $(LIMIT_ERROR)"
	$(ECHO) "----------------------"
	$(ECHO) "--- PATHES -----------"
	$(ECHO) "PATH_VPATH = $(PATH_VPATH)"
	$(ECHO) " "
	$(ECHO) "PATH_MISBUILD= $(PATH_MISBUILD)"
	$(ECHO) " "
	$(ECHO) "PATH_PROJECT = $(PATH_PROJECT)"
	$(ECHO) " "
	$(ECHO) "PATH_TOOLCHAIN = $(PATH_TOOLCHAIN)"
	$(ECHO) " "
	$(ECHO) "PATH_APP = $(PATH_APP)"
	$(ECHO) " "
	$(ECHO) "PATHOUT_OTHER = $(PATHOUT_OTHER)"
	$(ECHO) " "
	$(ECHO) "PATH_OS = $(PATH_OS)"
	$(ECHO) " "
	$(ECHO) "PATH_BSW = $(PATH_BSW)"
	$(ECHO) " "
	$(ECHO) "PATH_PRELINK = $(PATH_PRELINK)"
	$(ECHO) " "
	$(ECHO) "PATH_DRIVER = $(PATH_DRIVER)"
	$(ECHO) " "
	$(ECHO) "PATH_CONFIG = $(PATH_CONFIG)"
	$(ECHO) " "
	$(ECHO) "PATH_STARTUPCODE = $(PATH_STARTUPCODE)"
	$(ECHO) " "
	$(ECHO) "PATH_STDLSL = $(PATH_STDLSL)"
	$(ECHO) " "
	$(ECHO) "PATH_STDLIB = $(PATH_STDLIB)"
	$(ECHO) " "
	$(ECHO) "PATH_STDINC = $(PATH_STDINC)"
	$(ECHO) " "
	$(ECHO) "PATH_PREPROCESSORINC = $(PATH_PREPROCESSORINC)"
	$(ECHO) " "
	$(ECHO) "PATH_COMPILERINC = $(PATH_COMPILERINC)"
	$(ECHO) " "
	$(ECHO) "PATH_ASSEMBLERINC = $(PATH_ASSEMBLERINC)"
	$(ECHO) " "
	$(ECHO) "PATH_RRECOMPILE = $(PATH_PRELINKSRC)"
	$(ECHO) " "
	$(ECHO) "PATH_POSTCOMPILE = $(PATH_POSTLINKSRC)"
	$(ECHO) " "
	$(ECHO) "PATH_THIRDPARTY = $(PATH_THIRDPARTY)"
	$(ECHO) " "
	$(ECHO) "PATHOUT_OBJ = $(PATHOUT_OBJ)"
	$(ECHO) " "
	$(ECHO) "PATHOUT_LIB = $(PATHOUT_LIB)"
	$(ECHO) " "
	$(ECHO) "----------------------"
	$(ECHO) "--- FILES-------------"
	$(ECHO) "FILE_PREOBJ = $(FILE_PREOBJ)"
	$(ECHO) " "
	$(ECHO) "FILE_POSTOBJECT = $(FILE_POSTOBJ)"
	$(ECHO) " "
	$(ECHO) "FILE_PRELIB = $(FILE_PRELIB)"
	$(ECHO) " "
	$(ECHO) "FILE_POSTLIB = $(FILE_POSTLIB)"
	$(ECHO) " "
	$(ECHO) "FILE_LIBSTD = $(FILE_LIBSTD)"
	$(ECHO) " "
	$(ECHO) "FILE_ASSEMBLER = $(FILE_ASSEMBLER)"
	$(ECHO) " "
	$(ECHO) "FILE_PREPROCESSORINC = $(FILE_PREPROCESSORINC)"
	$(ECHO) " "
	$(ECHO) "FILE_ASSEMBLERINC = $(FILE_ASSEMBLERINC)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILERINC = $(FILE_COMPILERINC)"
	$(ECHO) " "
	$(ECHO) "FILE_LSL = $(FILE_LSL)"
	$(ECHO) " "
	$(ECHO) "FILE_STARTUPCUDE = $(FILE_STARTUPCODE)"
	$(ECHO) " "
	$(ECHO) "FILES_PRELINK = $(CFILES_PRELINK)"
	$(ECHO) " "
	$(ECHO) "TARGET_APP = $(TARGET_APP)"
	$(ECHO) " "
	$(ECHO) "TARGET_OS = $(TARGET_OS)"
	$(ECHO) " "
	$(ECHO) "TARGET_BSW = $(TARGET_BSW)"
	$(ECHO) " "
	$(ECHO) "TARGET_DRIVER =$(TARGET_DRIVER)"
	$(ECHO) " "
	$(ECHO) "TARGET_CONFIG =$(TARGET_CONFIG)"
	$(ECHO) " "
	$(ECHO) "TARGET_PRELINK =$(TARGET_PRELINK)"
	$(ECHO) " "
	$(ECHO) "TARGET_POSTLINK =$(TARGET_POSTLINK)"
	$(ECHO) " "
	$(ECHO) "TARGET_STARTUPCODE =$(TARGET_STARTUPCODE)"
	$(ECHO) " "
	$(ECHO) "TARGET_THIRDPARTYS =$(TARGET_THIRDPARTY)"
	$(ECHO) " "
	$(ECHO) "TARGET_LIBS = $(FILE_TARGETLIBS)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_APP = $(FILE_COMPILER_APP)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_OS =$(FILE_COMPILER_OS)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_BSW = $(FILE_COMPILER_BSW)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_DRIVER =$(FILE_COMPILER_DRIVER)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_CONFIG =$(FILE_COMPILER_CONFIG)"
	$(ECHO) " "
	$(ECHO) "FILE_ALLHEADER = $(PATH_ALLHEADERDIR)"
	$(ECHO) " "
	$(ECHO) "FILE_COMPILER_THIRDPARTY =  $(FILE_COMPILER_THIRDPARTY)"
	$(ECHO) " "
	$(ECHO) "----------------------"
	$(ECHO) " "
	$(ECHO) "--- FLAGS ------------"
	$(ECHO) " "
	$(ECHO) "GLOBALFLAGS: 	$(GLOBALFLAGS)"
	$(ECHO) " "
	$(ECHO) "CFLAGS: 	$(CFLAGS)"
	$(ECHO) " "
	$(ECHO) "ASFLAGS: 	$(ASFLAGS)"
	$(ECHO) " "
	$(ECHO) "USAGE_PUTHEX $(USAGE_PUTIHEX)"
	$(ECHO) " "
	$(ECHO) "LDFLAGS: 	$(LDFLAGS)"
	$(ECHO) " "
	$(ECHO) "----------------------"
	$(ECHO) "USAGE_SCANDEPTH = $(USAGE_SCANDEPTH)"





debugallsymbols echoallsymbols debugvarsverbose echovarsverbose:
	$(ECHO) ""
	$(ECHO) "DEBUG ALL SYMBOLS"
	$(ECHO) "----------------------"
	$(foreach v, $(filter-out .VARIABLES,$(.VARIABLES)), $(info $(v) = $($(v))))





debugtest testdebug:
	$(MAKE) debug3party
	$(MAKE) debugapp





debugtest3party testdebug3party test3partydebug:
	$(MAKE) -C $(PATH_THIRDPARTY)/../UNITTEST debug 						\
		PATH_MISBUILD=$(PATH_MISBUILD)





debugtestapp testdebugapp testappdebug:
	$(MAKE) -C $(PATH_PROJECT)/UNITTEST 									\
		debug PATH_MISBUILD=$(PATH_MISBUILD)



################################################################################
### Build Targets and flash
################################################################################

rebuild:cleanall all





all: $(FILE_TARGETLIBS)
	$(MAKE) test
	$(MAKE) app
	$(MAKE) flash





flash:$(TARGET_HEXTOFLASH)
ifeq ($(USAGE_FLASHCOMMAND),,)
	$(ECHO) "FLASHCOMMAND NEEDED. Define USAGE_FLASHCOMMAND"
else
	$(USAGE_FLASHCOMMAND)"$(TARGET_HEXTOFLASH)"
endif





app: buildlibs
	$(CCC) 																	\
	$(GLOBALFLAGS) 															\
	$(FILE_PREOBJ) 															\
	$(FILE_PRELIB) 															\
	$(addprefix $(PATHOUT_LIB)/,$(FILE_TARGETLIBS)) 						\
	$(FILE_POSTLIB) 														\
	$(FILE_LIBSTD) 															\
	$(LDFLAGS)




buildlibs:
	$(MAKE) $(FILE_TARGETLIBS)





test:
	$(MAKE) test3party
	$(MAKE) testapp





test3party 3partytest testthirdpary thirdpartytest:
	$(foreach tmp,$(PATH_THIRDPARTY), 										\
	$(MAKE) -C $(tmp)/../UNITTEST test PATH_MISBUILD=$(PATH_MISBUILD))







testapp apptest:
	$(MAKE) -C $(PATH_PROJECT)/UNITTEST test PATH_MISBUILD=$(PATH_MISBUILD)





%.$(TYPE_INTERMEDIATEFILE): %.c
	$(CCC) $(CFLAGS) $(ASFLAGS) $(GLOBALFLAGS)  $<





libapp.a:libapp
libapp:$(TARGET_APP)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@)) 		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libos.a:libos
libos:$(TARGET_OS)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@)) 		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libstartup.a:libstartup
libstartup:$(TARGET_STARTUPCODE)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@))  		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libbsw.a:libbsw
libbsw:$(TARGET_BSW)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@)) 		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libdriver.a:libdriver
libdriver:$(TARGET_DRIVER)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@)) 		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libconfig.a:libconfig
libconfig:$(TARGET_CONFIG)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@))  		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libprelink.a:libprelink
libprelink:$(TARGET_PRELINK)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@))  		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libpostlink.a:libpostlink
libpostlink:$(TARGET_POSTLINK) $(FILE_POSTOBJ)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@))  		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





libthirdparty.a:libthirdparty
libthirdparty lib3party:$(TARGET_THIRDPARTY)
	$(AR) $(ARFLAGS) $(addprefix $(PATHOUT_LIB)/,$(addsuffix .a, $@)) 		\
		$(addprefix $(PATHOUT_OBJ)/,$(^F))





################################################################################
### Cleanup
################################################################################

cleanall allclean:
	$(MAKE) cleanapp
	$(MAKE) cleantest





cleantest testclean:
	$(MAKE) cleantestapp
	$(MAKE) cleantest3party





cleantest3party testclean3party test3partyclean:
	$(foreach tmp,$(PATH_THIRDPARTY), 										\
	$(MAKE) -C $(tmp)/../UNITTEST clean PATH_MISBUILD=$(PATH_MISBUILD))





cleantestapp testcleanapp testappclean:
	$(MAKE) -C $(PATH_PROJECT)/UNITTEST clean





cleanapp appclean:
ifneq ($(PATHOUT_OTHER),)


ifneq ($(PATHOUT_OTHER), $(filter "C;" "/",$(PATHOUT_OTHER),))
	$(RM) $(PATHOUT_OBJ)/*
	$(RM) $(PATHOUT_LIB)/*
	$(RM) $(PATHOUT_OTHER)/*

#(RM) $(PATHOUT_OTHER)/*/* $(PATHOUT_OTHER)/* 2>/dev/null

else
	$(ECHO) "ERROR Path is root! Nothing to do"

endif


else
	$(ECHO) "ERROR Path is root! Nothing to do"
endif





cleanlibapp:
	 $(RM) $(PATHOUT_LIB)/libapp.a $(PATHOUT_OBJ)/$(TARGET_APP)





cleanlibstartup:
	 $(RM) $(PATHOUT_LIB)/libstartup.a $(PATHOUT_OBJ)/$(TARGET_STARTUPCODE)





cleanlibbsw:
	 $(RM) $(PATHOUT_LIB)/libbsw.a $(PATHOUT_OBJ)/$(TARGET_BSW)





cleanlibos:
	 $(RM) $(PATHOUT_LIB)/libos.a $(PATHOUT_OBJ)/$(TARGET_OS)





cleanlibdriver:
	 $(RM) $(PATHOUT_LIB)/libdriver.a $(PATHOUT_OBJ)/$(TARGET_DRIVER)





cleanlibconfig:
	 $(RM) $(PATHOUT_LIB)/libconfig.a $(PATHOUT_OBJ)/$(TARGET_CONFIG)





cleanprelink:
	 $(RM) $(PATHOUT_LIB)/libprelink.a $(PATHOUT_OBJ)/$(TARGET_PRELINK)





cleanpostlink:
	 $(RM) $(PATHOUT_LIB)/libpostlink.a $(PATHOUT_OBJ)/$(TARGET_POSTLINK)





clean3party cleanthirdparty:
	 $(RM) $(PATHOUT_LIB)/libthirdparty.a $(PATHOUT_OBJ)/$(TARGET_THIRDPARTY)





cleanlib:
	 $(RM) $(PATHOUT_LIB)/lib$(LIB).a





cleanobj:
	 $(RM) $(PATHOUT_OBJ)/$(OBJ).$(TYPE_INTERMEDIATEFILE)





cleanallobj cleanallobjs:
	 $(RM) $(PATHOUT_OBJ)/*





cleanalllib cleanalllibs:
	 $(RM) $(PATHOUT_OBJ)/*





clean:
	$(ECHO)  "-----------------------------------------------------------------"
	$(ECHO) "Hey ho, say me cleaning what?"
	$(MAKE) helpEntry
	$(MAKE) helpClean





################################################################################
### Code format
################################################################################

formatapp appformat: $(FILE_COMPILER_APP)
	$(USAGE_FORMATCOMMAND) 	$(FILE_COMPILER_APP)



formatbsw bswformat: $(FILE_COMPILER_BSW)
	$(USAGE_FORMATCOMMAND) 	$(FILE_COMPILER_BSW)



formatdriver driveformat:$(FILE_COMPILER_DRIVER)
	$(USAGE_FORMATCOMMAND) 	$(FILE_COMPILER_DRIVER)



formatos osformat:$(FILE_COMPILER_OS)
	$(USAGE_FORMATCOMMAND)	$(FILE_COMPILER_OS)



formatconfig configformat:$(FILE_COMPILER_CONFIG)
	$(USAGE_FORMATCOMMAND) 	$(FILE_COMPILER_CONFIG)



formatthirdparty thirdpartyformat 3partyformat format3party: 				\
	$(FILE_COMPILER_THIRDPARTY)
	$(USAGE_FORMATCOMMAND) 	$(FILE_COMPILER_THIRDPARTY)



formatstartup startuformat:$(FILE_STARTUPCODE)
	$(USAGE_FORMATCOMMAND) 	$(FILE_STARTUPCODE)



formatprebuild prebuildformat: 												\
	$(PATH_PRELINK) $(PATH_PRELINKSRC) $(PATH_PRELINKHDR)
	$(USAGE_FORMATCOMMAND)  $(PATH_PRELINK)
	$(USAGE_FORMATCOMMAND) 	$(PATH_PRELINKSRC)
	$(USAGE_FORMATCOMMAND) 	$(PATH_PRELINKHDR)



formatpostbuild postbuildformat: 											\
	$(PATH_POSTLINK) $(PATH_POSTLINKSRC) $(PATH_POSTLINKHDR)
	$(USAGE_FORMATCOMMAND) 	$(PATH_POSTLINK)
	$(USAGE_FORMATCOMMAND) 	$(PATH_POSTLINKSRC)
	$(USAGE_FORMATCOMMAND) 	$(PATH_POSTLINKHDR)



formatinclude includeformat: 												\
	$(PATH_PREPROCESSORINC) $(PATH_ASSEMBLERINC) $(PATH_COMPILERINC)
	$(USAGE_FORMATCOMMAND) 	$(PATH_PREPROCESSORINC)
	$(USAGE_FORMATCOMMAND) 	$(PATH_ASSEMBLERINC)
	$(USAGE_FORMATCOMMAND) 	$(PATH_COMPILERINC)



################################################################################
### Code check
################################################################################


checkapp appcheck: $(PATH_APP)
	$(foreach tmp,$(FILE_COMPILER_APP), $(USAGE_CHECKCOMMAND) $(tmp))



checkbsw bswcheck: $(FILE_COMPILER_BSW)
	$(foreach tmp,$(FILE_COMPILER_BSW), $(USAGE_CHECKCOMMAND) $(tmp))




checkdriver drivecheck:$(FILE_COMPILER_DRIVER)
	$(USAGE_CHECKCOMMAND) 	$(FILE_COMPILER_DRIVER)



checkos oscheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND)	$(FILE_COMPILER_OS)



checkconfig configcheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND) 	$(FILE_COMPILER_CONFIG)



checkthirdparty thirdpartycheck 3partycheck check3party:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND) 	$(FILE_COMPILER_THIRDPARTY)



checkstartup startucheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND) 	$(FILE_STARTUPCODE)



checkprebuild prebuildcheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND)  $(PATH_PRELINK)
	$(USAGE_CHECKCOMMAND) 	$(PATH_PRELINKSRC)
	$(USAGE_CHECKCOMMAND) 	$(PATH_PRELINKHDR)



checkpostbuild postbuildcheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND) 	$(PATH_POSTLINK)
	$(USAGE_CHECKCOMMAND) 	$(PATH_POSTLINKSRC)
	$(USAGE_CHECKCOMMAND) 	$(PATH_POSTLINKHDR)



checkinclude includecheck:$(FILE_COMPILER_BSW)
	$(USAGE_CHECKCOMMAND) 	$(PATH_PREPROCESSORINC)
	$(USAGE_CHECKCOMMAND) 	$(PATH_ASSEMBLERINC)
	$(USAGE_CHECKCOMMAND) 	$(PATH_COMPILERINC)



################################################################################
### Code check
################################################################################
tags ctags:
	$(CTAGS) $(PATH_ALLSOURCDIR) $(PATH_ALLHEADERDIR)
	$(CSCOPE) 																\
	$(foreach tmp,$(PATH_ALLHEADERDIR),$(patsubst %,-c%,$(tmp)))  			\
	$(foreach tmp,$(PATH_ALLHEADERDIR),$(patsubst %,-I%,$(tmp)))  			\


##alias cppcheck='$PROJECT_HOME/TOOLS/cppcheck-master/cppcheck.exe
##--addon=$PROJECT_HOME/TOOLS/cppcheck-master/addons/misra.json --enable=all
##--platform=win32W --output-file=cppcheckResult.txt --std=c99 --template=gcc -I.'
#
#alias clangformat='$PROJECT_HOME/TOOLS/codeFormat/clang-format.exe -style=file -i -fallback-style=none'



################################################################################
### EOF ########################################################################
